#!/bin/sh

#set -x
#set -u

echolog() { echo -e "$@\n"; echo $@ >>.smartSlurm.log; }
echolog1() { echo "$@" >> .smartSlurm.log; }

output="Running: `realpath $0`"

for param in "$@"; do
    if [[ "$param" == *\ * ]]; then
        output="$output \"$param\""
    else
        output="$output $param"
    fi
done


usage() { echolog -e "Usage: \n${0##*/} <\"bashScriptV2.sh [parameter1] [parameter2] ...\"> [sbatch options, such as: \"sbatch -p medium -t 24:0:0 -c 4\" .] <useTmp/noTmp> [run, default is empty to test the pipeline, which does not submit jobs, only create fake job id, 1194.] [noEmail/noSuccEmail, default is all emails.]"; exit 1; }

[ -f ${1%% *} ] || { echolog bash script file not exist: .${1%% *}... Exiting...; usage; }

if [ -z "$2" ]; then 
    echolog Commandline sbatch option is empty. Please make sure all steps have sbatch options in your bash script.
elif [[ "$2" != sbatch* ]]; then 
    args=("$@")
    new_arg="sbatch -p short -c 1 --mem 2G -t 50:0"
    args=("${args[0]}" "$new_arg" "${args[@]:1}")
    set -- "${args[@]}"
#else 
#    usage
fi

[[ "$3" == useTmp ]] || [[ "$3" == noTmp ]] || usage

[[ -z "$4"  ]] || [[ "$4" == run ]] || usage

[[ -z "$5" ]] || [[ "$5" == noSuccEmail ]] || [[ "$5" == noEmail ]] || usage 

if [ -z "$5" ]; then
    export lessEmail=""
else 
    export lessEmail="$5"
fi 

if [ ! -z "$6" ]; then
    if [[ "$6" == checkpoint ]]; then
        checkpoint=".Checkpoint"
    elif [[ "$6" == excludeFailedNodes ]]; then
        echolog1 "Excluding failed nodes"
    else 
        usage
    fi
else
    checkpoint=""
fi

[ -f .smartSlurm.log ] && mv .smartSlurm.log .smartSlurm.log.$(stat -c '%.19z' .smartSlurm.log | cut -c 6- | tr " " . | tr ":" "-")

#[ -f log.out ] && mv log.out log.out.$(stat -c '%.19z' log.out | tr " " . | tr ":" "-")

current_date=$(date '+%Y-%m-%d_%H-%M-%S_%4N') 
echolog1 runAsPipeline run date: $current_date
echolog "$output"

#echolog1 `module list`

if [ -f ~/.smartSlurm/config/config.txt ]; then
    echolog1 Config file path: ~/.smartSlurm/config/config.txt
    source ~/.smartSlurm/config/config.txt
else
    echolog1 Config file path: $(dirname $0)/../config/config.txt
    source $(dirname $0)/../config/config.txt || { echoerr Config list file not found: config.txt; exit 1; }
fi

[[ "$smartSlurmLogDir" == /* ]] || export smartSlurmLogDir=$PWD/$smartSlurmLogDir

[ -d $smartSlurmLogDir ] && [[ "$4" == run ]] && cp -rp $smartSlurmLogDir $smartSlurmLogDir.$(stat -c '%.19z' $smartSlurmLogDir | cut -c 6- | tr " " "." | tr ":" "-")

mkdir -p $smartSlurmLogDir

checkSum=`md5sum ${1%% *} | cut -d' ' -f 1`

run=$smartSlurmLogDir/slurmPipeLine.$checkSum.sh

[[ "$4" == run ]] && run=$smartSlurmLogDir/slurmPipeLine.$checkSum.run.sh

[[ "$5" == checkpoint ]] && run=$smartSlurmLogDir/slurmPipeLine.$checkSum.run.checkpoint.sh

if [ -f "$run" ]; then
    thisCmd="#cmd: $0 $@"
    lastCmd=`tail -n 1 $run`
    if [[ "$thisCmd" == "$lastCmd" ]]; then
        echolog This is a re-run with the same command and script is not changed, no need to convert the script. Using the old one: $run
        [[ "$1" = *" "* ]] && para=${1#* } || para=""
        eval "/bin/bash $run $para 2>&1" | tee -a .smartSlurm.log 
        exit
    fi
fi

echolog Converting $1 to $run

echo "#!/bin/sh" > $run

echo "#from cmd: $0 $@" >> $run
echo "#run from: `pwd`" >> $run

echo "#set -x" >> $run

echo "echo Running \$0 \$@"  >> $run

echo "module list >> .smartSlurm.log 2>&1" >> $run

echo "xsubd=\"$2\"" >> $run

echo "rm \$smartSlurmLogDir/keepRunningJobs.txt 2>/dev/null" >> $run
echo "if [ -f \$smartSlurmLogDir/allJobs.txt ]; then" >> $run
echo "    cancelAllJobsReRun.sh" >> $run
echo "    [ \$? == 1 ] && exit 0;" >> $run
echo "fi" >> $run

echo "cwd=\`realpath ./\`" >> $run

#echo "rm \$smartSlurmLogDir/*.failed \$smartSlurmLogDir/*.killed 2>/dev/null" >> $run

#echo "[ -f \$smartSlurmLogDir/allJobs.txt ] && [ ! -f \$smartSlurmLogDir/keepRunningJobs.txt ] && mv \$smartSlurmLogDir/allJobs.txt \$smartSlurmLogDir/allJobs.txt.old"  >> $run

echo "[ -f \$smartSlurmLogDir/allJobs.txt ] && cp \$smartSlurmLogDir/allJobs.txt \$smartSlurmLogDir/allJobs.txt.old"  >> $run

echo "rm -r \$smartSlurmLogDir/downsteamjob.adjusting \$smartSlurmLogDir/job.adjusting.lock \$smartSlurmLogDir/requeue.start \$smartSlurmLogDir/skipAllSuccessJobs*.txt \$smartSlurmLogDir/reRunAllSuccessJobs*.txt \$smartSlurmLogDir/*requeued* 2>/dev/null" >> $run

echo "[ ! -f \$smartSlurmLogDir/keepRunningJobs.txt ] && printf \"%-10s   %-20s   %-10s   %-10s  %-10s %-10s %-10s\n\" job_id depend_on job_flag program reference inputs comment > \$smartSlurmLogDir/allJobs.txt || echo -e \"\n\`date\`\" >> \$smartSlurmLogDir/allJobs.txt">> $run
echo "echo ---------------------------------------------------------" >> $run

[ "$3" == "useTmp" ] && echo ". $(dirname $0)/utils.sh" >> $run

# get slurm account from command line
slurmAccount=""
if [[ "$2" == *\ -A\ * ]]; then
    slurmAccount=${2#*-A }
    slurmAccount="-A ${slurmAccount%% *}"
elif [[ "$2" == *\ --account\ * ]]; then
    slurmAccount=${2#*--account }
    slurmAccount="-A ${slurmAccount%% *}"
elif [[ "$2" == *\ --account=* ]]; then
    slurmAccount=${2#*--account\=}
    slurmAccount="-A ${slurmAccount%% *}"
elif [[ "$2" == *\ --array=* ]]; then
    echolog Error: job array is not supported! $2
    exit
elif [[ "$2" == *\ -a\ * ]]; then
    echolog Error: job array is not supported! $2
    exit
fi

if [[ "$2" == *\ --mail-user=* ]]; then
    userEmail="--mail-user ${2#*--mail-user=}"
    #export userEmail="${userEmail%% *}"
else 
    userEmail="";
fi

[ -z "$slurmAccount" ] && [ `sshare -Uu $USER | wc -l` -ge "4" ] && { echolog Missing slurm account: $2; exit 1; }

IFS=$'\n'; firstRowBelowLoopStart=""; findLoopStart=""
for t in `cat ${1%% *}`; do
    [ ! -z "$findLoopStart" ] && findLoopStart="" && firstRowBelowLoopStart=yes || firstRowBelowLoopStart=""

    #echolog original row: .$t.

    # get space and the real command
    space=""
    for (( i=0; i<${#t}; i++ )); do
        chr=${t:$i:1}
        if [[ "$chr" == " " || "$chr" == $'\t' ]]; then
            space="$space$chr"
        else
           # i is the real command
           i="${t:$i:1000}"
           break
        fi
    done

    # this maybe a new command, remember the space
    [ -z "$cmd" ] && oldspace="$space"

    if [[ "$i" == \#@* ]]; then
        echolog1
        echolog1 find job marker:
        echolog1 $i

        findjob="yes"
        x=${i#*\#@}
        # #@1,0,find1,ref,input1.input2,sbatch -p short -c 1 -t 50:0

        # ssbatch -L ./ -P bowtie2-4core -R dm3 -F bowtie.group1 -I group1/tumor1 -c 4 -t 12:0:0 --mem 20G  job1BowtieGroup1.sh run
        IFS=',' read -a arrIN <<< "$x"
        IFS=''

        step=${arrIN[0]}
        de=${arrIN[1]}
        name=${arrIN[2]%%:*}; [[ "$name" == *.NoCheckpoint ]] && name=${name%.NoCheckpoint} || name=$name$checkpoint
        #indx=${arrIN[3]}
        ref=${arrIN[3]%%:*} # references files which need to rsync to tmp space
        inputs=${arrIN[4]}
        xsuba=${arrIN[5]}  # sbatch options

        ( [ -z "$step" ] || [ -z "$de" ] || [ -z "$name" ] ) && echolog Job marker \"$i\" is wrong. The first three parameters can not be empty. Please refer README.md for correct format! && exit

        # if it is old format bash job annotation without inputs
        [[ "$name$ref$inputs" == *sbatch* ]] && echolog Job marker \"$i\" is wrong. Please refer README.md for correct format! && exit

        [ ! -z "$xsuba" ] && [[ "$xsuba" != sbatch* ]] && echolog Job marker \"$i\" is wrong. Please refer README.md for correct format! && exit

        [ ! -z "$xsuba" ] && { echo "${space}xsub=\"$xsuba $slurmAccount\"" >> $run; echolog1 sbatch options: $xsuba; } || echo "${space}xsub=\"\$xsubd\"" >> $run
        
        if [[ "$xsuba" == *\ --array=* ]]; then
            echolog Error: job array is not supported! $xsuba
            exit
        elif [[ "$xsuba" == *\ -a\ * ]]; then
            echolog Error: job array is not supported! $xsuba
            exit
        fi

        # echolog run content:
        # tail $run
        # exit

        [ -z "$ref" ] || ref=.$ref
        [ -z "$inputs" ] || inputs=.$inputs

        echo "$t" >> $run

        #echo step is $step
        #echo de is $de
        #echo name is $name
        cmd=""

    elif [ ! -z $findjob ]; then
        [[ "$i" == \#* ]] && { findjob=""; echo "$t" >> $run; continue; }
        echolog1
        echolog1 find job:
        echolog1 $i
        [[ "$i" == ssbatch* ]] && echolog Error! Please remove ssbatch command from $1. && exit 1

        [ -z "$cmd" ] && cmd="${i%\\}" || cmd="$cmd ${i%\\}" 
        # command maybe multiple lines
        if [[ "$i" == *\\ ]]; then  # command have multiple lines, at end of the line is a \
          #cmd="$cmd ${i%\\}"
          continue
        fi

        #cmd="${cmd%% #*}" # remove comments

        echolog1 $cmd --before parsing
        #set -x

        # check to see if we need escape bash variables
        IFS=';'; tmp=''
        for c in ${cmd%% #*}; do
            [[ -z $(echo $c | xargs) ]] && continue
            vs=$(echo $c | grep -oP '\$\w+|\$\{\w+\}|\$\{\w+\#|\$\{\w+\%|\$\{\w+\/' | tr -d '${}#%/' | sort -u | tr '\n' ';')
            # find bash vaiable such as $abc, ${abc}, ${abc#..., ${abc%... or ${abc/...
            for v in $vs; do
                #echo working on .$v.
                pat="* $v\=*"
                # has variable assignment in the command, for example "z='abc'; k=$z; x=${z//c/ }; x=${z#a}; x=${z%%b*};", so we need escapte $z...
                [[ " $tmp" == $pat ]] && { c=${c//\$$v/\\\$$v}; c=${c//\${$v/\\\$\{$v}; }
            done
            [ -z "$tmp" ] && tmp="$c;" || tmp="$tmp$c;"
            #echo ."$tmp".
        done
        #set +x

        cmd="$tmp"
        echolog1 $cmd --after parseing
        space="$oldspace"
        #

        #echo after remove space: ."$cmd".
        findjob=""
        [ ! -z ${find[$step]} ] && { echolog job step id should be unique: $step exiting...; exit 1; } ||  find[$step]=yes

        # don't need this anymore, because we are uing single quotation in srun command
        cmd=${cmd//\"/\\\"} # escape double quotes

        cmd=${cmd//\'/\\\"} # escape single quotes to double

        cmd=${cmd//\$(/\\\$(} # escap $((a+b)) and $(command)

        cmd=${cmd//\`/\\\`} # escape `

        # escape double quota. bsub does not need this? not sure
        #cmd=${cmd//\"/\\\\\"}

        echolog1 cmd: ".$cmd."

        [ -z "$name" ] && name=${cmd%% *}

        cloper[$step]=$loper
        # IFS=' '
        # if [[ "$de" == *\.* ]]; then
        #     for dep in ${de//\./ }; do
        #         l=$(expr length ${cloper[$step]} 2>/dev/null) || l=0
        #         ll=$(expr length ${cloper[$dep]} 2>/dev/null) || ll=0
        #         if [ $l -ge $ll ]; then
        #             sameLoop=""
        #             break 
        #         else
        #             sameLoop="yes"
        #         fi
        #     done
        # else
        #     #echolog $step:${cloper[$step]}:$de:${cloper[$de]}:
        #     l=$(expr length ${cloper[$step]} 2>/dev/null) || l=0
        #     ll=$(expr length ${cloper[$de]} 2>/dev/null) || ll=0
        #     [ $l -ge $ll ] && sameLoop="" || sameLoop="yes"
        # fi

        #echo "debug: ${cloper[$step]} ${cloper[$de]} .$sameLoop. " >> $run
        [ "$3" == "useTmp" ] && useTmp="reference: $ref"

        echo -e "${space}echo step: $step, depends on: $de, job name: $name, flag: ${step}.$de.$name$loper  $useTmp >> .smartSlurm.log " >> $run
        echo "${space}flag=${step}.$de.$name$loper"  >> $run
        echo "${space}flag=\${flag//\//_}" >> $run   # replace path / to _

        echo -e "${space}deps=\"\""  >> $run
        #if [[ "$de" != "0" ]]; then
            IFS=' ' # xxx
            if [[ "$de" == *\.* ]]; then
                for dep in ${de//\./ }; do
                    l=$(expr length ${cloper[$step]} 2>/dev/null) || l=0
                    ll=$(expr length ${cloper[$dep]} 2>/dev/null) || ll=0
                    if [ $l -eq $ll ]; then
                        echo "${space}[ -z \"\${jobID[$dep]}\" ] || deps=\"\$deps:\${jobID[$dep]}\"" >> $run 
                    else
                        echo "${space}[ -z \"\${jobIDs[$dep]}\" ] || deps=\"\$deps:\${jobIDs[$dep]}\"" >> $run
                        echo "${space}depWasUsed[$dep]=\"yes\"" >> $run 
                    fi          
                done 

            else
                l=$(expr length ${cloper[$step]} 2>/dev/null) || l=0
                ll=$(expr length ${cloper[$de]} 2>/dev/null) || ll=0
                if [ $l -eq $ll ]; then 
                    echo "${space}[ -z \"\${jobID[$de]}\" ] || deps=\":\${jobID[$de]}\""  >> $run
                else     
                    echo "${space}[ -z \"\${jobIDs[$de]}\" ] || deps=\":\${jobIDs[$de]}\""  >> $run
                    echo "${space}depWasUsed[$de]=\"yes\"" >> $run
                fi
            fi     
        #fi

        

        [ -z "$inputs" ] && inputs=none
        [ -z "$ref" ] && ref=none

        # move to ssbatch? 
        #echo "set -x" >> $run 
        #echo "${space}comment=\"\"" >> $run
        # for jobs with no dep, check if there is formula yet, if yes, directly submit.
        # otherwise, only allow the first 10 jobs to run
        echo "${space}if [ -z \"\$deps\" ]; then" >> $run
        #echo "${space}    [[ \"\$inputs\" == none ]] && [ -f \"\$smartSlurmJobRecordDir/stats/$name.$ref.memTime.stat.noInput\" ] && hasFormula=y || hasFormula=\"\"" >> $run
        #echo "${space}    [[ \"\$inputs\" != none ]] && [ -f \"\$smartSlurmJobRecordDir/stats/$name.$ref.mem.stat\" ] && hasFormula=y || hasFormula=\"\"" >> $run
        #echo "${space}    if [ -z \"\$hasFormula\" ]; then" >> $run 

        echo "${space}        nJobsInSameStep=\$(echo \"\${jobIDs[$step]}\" | tr -cd ':' | wc -c)" >> $run
        echo "${space}        if [[ \"\$nJobsInSameStep\" -ge $((firstBatchCount-1)) ]]; then" >> $run
        echo "${space}            deps=\"-H\"" >> $run
        echo "${space}        fi" >> $run
        #echo "${space}    fi" >> $run  
        echo "${space}else" >> $run
        echo "${space}    deps=\"-H -d afterok\$deps\"" >> $run
        echo "${space}fi" >> $run 
        
        #echo "set +x" >> $run 
        
        [[ "$3" == "useTmp" ]] && [[ "$ref" != none ]] && echo "${space}setPath $ref" >> $run && cmd="rsyncToTmp ${ref//./ $}; $cmd"

        #cmd="{set -e; $cmd;}" # && touch \$cwd/\$flag.success || touch \$cwd/\$flag.failed"
        #cmd="set -e; $cmd" # && touch \$cwd/\$flag.success || touch \$cwd/\$flag.failed"

        [[ "$5" == excludeFailedNodes ]] &&  excludeFailedNode="-X"

        [[ "$4" == run ]] && echo "${space}id=\$(ssbatch $excludeFailedNode -P $name -R ${ref//./$} -F \$flag -I ${inputs//./,$} $userEmail \$deps $slurmAccount \${xsub#sbatch }  --wrap \"$cmd\" run)" >> $run  || echo "${space}id=\$(ssbatch $excludeFailedNode -P $name -R ${ref//./$} -F \$flag -I ${inputs//./,$} \$deps $slurmAccount \${xsub#sbatch } --wrap \"$cmd\") " >> $run

        echo "${space}green=\"Got output from ssbatch: \\033[0;32m\$id\\033[0m\n\"" >> $run
        echo "${space}red=\"Got output from ssbatch: \\033[0;31m\$id\\033[0m\n\"" >> $run
       
        #echo "${space}echo -e \"\$red \$green\"  ">> $run
        
        # clear jobIDs if the ids were used in the previous downstream step 
        echo "${space}    if [ ! -z \"\${depWasUsed[$step]}\" ]; then" >> $run
        echo "${space}        jobIDs[$step]=''" >> $run
        echo "${space}        depWasUsed[$step]=\"\"" >> $run
        echo "${space}    fi" >> $run

        # GREEN='\033[0;32m' RED='\033[0;31m' NC='\033[0m' # No Color 
        echo "${space}[[ \"\$id\" == *\"missingInputFile\"* ]] && echo -e \"\$red\" && exit ">> $run

        #echo "${space}[[ \"\$id\" == *\"thisJobStillRunning\"* ]] && echo -e \"\$id\n\" && id=\"\" ">> $run

        echo "${space}[[ \"\$id\" == *\"Submitted batch job \"* ]] && echo -e \"\$green\" && id=\${id##*Submitted batch job } && id=\${id%% *}">> $run

        echo "${space}[[ \"\$id\" == *\"thisJobStillRunning\"* ]] && echo -e \"\$green\" && id=\${id##*thisJobStillRunning } && id=\${id%% *}">> $run

        [[ "$3" == "useTmp" && ! -z "$ref" ]] && echo "${space}setPathBack $ref" >> $run

        echo "${space}if [[ \"\$id\" == *skipThisJob* ]]; then"  >> $run
        echo "${space}    echo -e \"\$green\" " >> $run 
        echo "${space}    jobID[$step]=\"\"" >> $run
        echo "${space}elif [[ \"\$id\" == *\"thisJobStillRunning\"* ]]; then" >> $run
        echo "${space}    id=\${id##*thisJobStillRunning } && jobID[$step]=\${id%% *}">> $run

        echo "${space}elif [[ \"\$id\" =~ ^[0-9]+\$ ]]; then"  >> $run
        #echo "${space}    touch \$cwd/\$flag.submitted" >> $run
        echo "${space}    alljobs=\"\$alljobs \$id\"" >> $run

        # # tell this is out of the loop for the depending job (de), so that we clear the job id list for the next step with depends on 'de'
        # if [[ "$de" == *\.* ]]; then
        #        for dep in ${de//\./ }; do
        #             [[ "$sameLoop" == "yes" ]] && echo "${space}    startNewLoop[$dep]=\"yes\""  >> $run || echo "    ${space}startNewLoop[$dep]=\"no\""  >> $run
        #        done
        # else
        #        [[ "$sameLoop" == "yes" ]] && echo "${space}    startNewLoop[$de]=\"yes\""  >> $run || echo "    ${space}startNewLoop[$de]=\"no\""  >> $run
        # fi

        #echo "${space}    [[ \"\${startNewLoop[$dep]}\" == \"yes\" ]] && jobIDs[$dep]=\"\" && startNewLoop[$step]=\"no\" " >> $run

        echo "${space}    jobID[$step]=\$id"  >> $run # xxxx
            
        echo "${space}    [ -z \"\${jobIDs[$step]}\" ] && jobIDs[$step]=\$id || jobIDs[$step]=\${jobIDs[$step]}:\$id"  >> $run

        echo "${space}else" >> $run
        echo "${space}    echo -e \"\$red\" && echo -e \"\\033[0;31mJob \$flag is not submitted!\\033[0m\""  >> $run
        #echo "${space}    echo Please check .smartSlurm.log for detail logs." >> $run
        echo "${space}    exit 1"  >> $run

        echo "${space}fi" >> $run
        IFS=''
        cmd=""
    else
        echo "$t" >> $run
        #findjob=""

        #if [[ "$i" == \#loopEnd* ]]; then
        #    echo find loop end: $i
        #    space=${space%    }
        #    loper=${loper%.\$*}
        if [[ "$i" == \#loopStart:* ]]; then
            echolog1; echolog1 find loop start: $i
            #a=`echo $i | xargs`  # remove leading space and tailing space
            a=${i#\#loopStart:}; a=${a%% *}
            loper="$loper.\$$a"
            #loper="$loper.for"
            findLoopStart=yes
        elif [[ "$i" == done* ]]; then
            echolog1
            echolog1 find loop end: $i
            #space=${space%    }
            loper=${loper%.\$*}
        elif [[ "$i" == for* ]]; then
            echolog1; echolog1 find for loop start: $i
            [ ! -z "$firstRowBelowLoopStart" ] && firstRowBelowLoopStart="" && continue
            #a=`echo $i | xargs`  # remove leading space and tailing space
            a=${i#* }; a=${a%% *}
            loper="$loper.\$$a"
        #    loper="$loper.for"
        #else

        #elif [[ "$i" == while* ]]; then
        #    echo; echo find loop start: $i
            #a=`echo $i | xargs`  # remove leading space and tailing space
            #a=whiele #${a#* }; a=${a%% *}
        #    loper="$loper.while"
        #elif [[ "$i" == until* ]]; then
        #    echo; echo find loop start: $i
            #a=`echo $i | xargs`  # remove leading space and tailing space
            #a=whiele #${a#* }; a=${a%% *}
        #    loper="$loper.until"
        fi
    fi
done
[ $? == 1 ] && exit 0

# go back to the original folder?
#echo "cd \$cwd/.." >> $run
#exit
echo "echo All submitted jobs: " >> $run
#echo "cat \$cwd/\$smartSlurmLogDir/allJobs.txt" >> $run
echo "awk '{print substr(\$0, 1, 155)}' \$smartSlurmLogDir/allJobs.txt" >> $run
echo "echo ---------------------------------------------------------" >> $run
[[ "$4" == run ]] || echo "echo Note: This is just a test run, so no job is actually submitted. In real run it should submit jobs and report as above." >> $run

[[ "$1" = *" "* ]] && para=${1#* } || para=""

echolog $run $para is ready to run. Starting to run ...

eval "/bin/bash $run $para 2>&1" | tee -a .smartSlurm.log 

RED='\033[0;31m'
NC='\033[0m' # No Color
GREEN='\033[0;32m'

echolog  

echolog -e ${GREEN}runAsPipeline${NC} finished. 
echolog Thank you for using Smart Slurm. You can run:
echolog -e "${GREEN}less .smartSlurm.log${NC} to see detail submission log."
echolog -e "${GREEN}checkRun${NC} to check run status and submission logs, and"
echolog -e "${RED}cancellAllJobs${NC} to cancal all jobs surmitted from current directory."