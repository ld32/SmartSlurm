#!/bin/sh

usage() { echo -e "Usage: \n${0##*/} <bashScriptV2.sh [parameter1] [parameter2] ...> <sbatch options, such as: \"sbatch -p medium -t 24:0:0 -c 4\" . Notice: it should be double quoted.> <useTmp/noTmp> [run, default is empty to test the pipeline, which does not submit jobs, only create fake job id, 1194.]"; exit 1; } 

#set -x

[ -f ${1%% *} ] || { echo bash script file not exist: ${1%% *} Exiting...; usage; }

[[ "$2" != sbatch* ]] && usage

[[ "$3" == useTmp ]] || [[ "$3" == noTmp ]] || usage 

[[ -z "$4"  ]] || [[ "$4" == run ]] || usage  

date

echo Running: $0 $@

module list 

[ -d logs ] && [[ "$4" == run ]] && cp -rp logs logs.$(stat -c %y logs | tr " " ".") 

mkdir -p logs

checkSum=`md5sum ${1%% *} | cut -d' ' -f 1`

run=logs/slurmPipeLine.$checkSum.sh

[[ "$4" == run ]] && run=logs/slurmPipeLine.$checkSum.run.sh

if [ -f "$run" ]; then  
    thisCmd="#cmd: $0 $@"
    lastCmd=`tail -n 1 $run`
    if [[ "$thisCmd" == "$lastCmd" ]]; then
        echo This is a re-run with the same command and script is not changed, no need to convert the script. Using the old one: $run 
        eval /bin/bash $run ${1#* }
        exit
    fi
fi 

echo converting $1 to $run

echo "#!/bin/sh" > $run  

#echo "set -x" >> $run

echo "echo Running \$0 \$@"  >> $run   

echo module list >> $run 
     
echo "xsubd=\"$2\"" >> $run
    
echo mkdir -p logs >> $run

echo "if [ -f logs/allJobs.txt ]; then" >> $run

echo "    cancelAllJobs logs/allJobs.txt " >> $run

echo "    [ \$? == 1 ] && exit 0;" >> $run

echo "fi" >> $run

echo "cwd=\`realpath ./\`" >> $run

#echo "rm logs/*.failed logs/*.killed 2>/dev/null" >> $run

echo "[ -f logs/allJobs.txt ] && mv logs/allJobs.txt logs/allJobs.txt.old"  >> $run 

echo "rm logs/skipAllSuccessJobs*.txt logs/reRunAllSuccessJobs*.txt 2>/dev/null" >> $run

echo "printf \"%-10s   %-20s   %-10s   %-10s  %-10s %-10s\n\" job_id depend_on job_flag software reference inputs> logs/allJobs.txt" >> $run 
echo "echo ---------------------------------------------------------" >> $run

[ "$3" == "useTmp" ] && echo ". $(dirname $0)/utils.sh" >> $run

# get slurm account from command line
slurmAccount=""
if [[ "$2" == *\ -A\ * ]]; then 
    slurmAccount=${2#*-A }
    slurmAccount="-A ${slurmAccount%% *}"
elif [[ "$2" == *\ --account\ * ]]; then  
    slurmAccount=${2#*--account }
    slurmAccount="-A ${slurmAccount%% *}"
elif [[ "$2" == *\ --account=* ]]; then  
    slurmAccount=${2#*--account\=}
    slurmAccount="-A ${slurmAccount%% *}"
fi  

[ -z "$slurmAccount" ] && [ `sshare -Uu $USER | wc -l` -ge "4" ] && { echo Missing slurm account: $2; exit 1; } 

IFS=$'\n'
for t in `cat ${1%% *}`; do 
    #echo original row: .$t. 
    
    # get space and the real command
    space=""
    for (( i=0; i<${#t}; i++ )); do
        chr=${t:$i:1}
        if [[ "$chr" == " " || "$chr" == $'\t' ]]; then
            space="$space$chr"
        else
           # i is the real command
           i="${t:$i:1000}"
           break
        fi
    done
    
    # this maybe a new command, remember the space
    [ -z "$cmd" ] && oldspace="$space"
    
    if [[ "$i" == \#@* ]]; then
        echo
        echo find job marker: 
        echo $i
        
        findjob="yes"
        x=${i#*\#@} 
        # #@1,0,find1,u,input1;input2,sbatch -p short -c 1 -t 50:0
        
        # smartSbatch -L ./ -S bowtie2-4core -R dm3 -F bowtie.group1 -I group1/tumor1 -c 4 -t 12:0:0 --mem 20G  job1BowtieGroup1.sh run
        IFS=',' read -a arrIN <<< "$x"
        IFS=''
    
        step=${arrIN[0]}
        de=${arrIN[1]}   
        name=${arrIN[2]%%:*}
        indx=${arrIN[3]}
        ref=${arrIN[4]%%:*} # references files which need to rsync to tmp space
        inputs=${arrIN[5]}
        xsuba=${arrIN[6]}  # sbatch options
        
        ([ - z "$step" ] || [ -z "$de" ] || [ -z "$name" ]) && echo Job marker \"$i\" is wrong. The first three parameters can not be empty. Please refer README.md for correct format! && exit 
        
        # if it is old format bash annotation without inputs
        [[ "$name$indx$ref$inputs" == *sbatch* ]] && echo Job marker \"$i\" is wrong. Please refer README.md for correct format! && exit         
        [ ! -z "$xsuba" ] && [[ "$xsuba" != sbatch* ]] && echo Job marker \"$i\" is wrong. Please refer README.md for correct format! && exit  

        [ ! -z "$xsuba" ] && { echo "${space}xsub=\"$xsuba $slurmAccount\"" >> $run; echo sbatch options: $xsuba; } || echo "${space}xsub=\"\$xsubd\"" >> $run 
        
        # echo run content:
        # tail $run
        # exit

        [ -z "$ref" ] || ref=.$ref
        [ -z "$inputs" ] || inputs=.$inputs
        
        echo "$t" >> $run
    
        #echo step is $step
        #echo de is $de
        #echo name is $name
        cmd=""
        
    elif [ ! -z $findjob ]; then
        [[ "$i" == \#* ]] && { findjob=""; echo "$t" >> $run; continue; }
        echo
        echo find job: 
        echo $i
        
        # command maybe multiple lines
        if [[ "$i" == *\\ ]]; then  # command have multiple lines, at end of the line is a \
          #echo check i: $i
          cmd="$cmd ${i%\\}"
          #echo cmd0: $cmd
          continue
        fi
        space="$oldspace"
        cmd="$cmd ${i%% #*}" # remove comments
        cmd="${cmd# }"       # remove leading space
        
        #echo cmd1:$cmd
        findjob=""
        [ ! -z ${find[$step]} ] && { echo job step id should be unique: $step exiting...; exit 1; } ||  find[$step]=yes
                
        cmd=${cmd//\\/\\\\}   # escape back slash
        
        #echo cmd2 is $cmd
        cmd=${cmd//\"/\\\"} # escape double quotes
        
        [ -z "$name" ] && name=${cmd%% *}
        
        #echo cmd3 is $cmd
        
        cloper[$step]=$loper
        sameloop=no
        IFS=' '
        if [[ "$de" == "0" ]]; then
            sameloop=""
        elif [[ "$de" == *\.* ]]; then
            
            for dep in ${de//\./ }; do
                if [[ ${cloper[$step]} == ${cloper[$dep]} ]]; then
                    sameloop=""
                else
                    sameloop="no"
                    break
                fi
            done
        elif [[ ${cloper[$step]} == ${cloper[$de]} ]]; then
            sameloop=""
        fi
                      
        #echo "debug: ${cloper[$step]} ${cloper[$de]} .$sameloop. " >> $run
        [ "$3" == "useTmp" ] && useTmp="reference: $ref"
        
        echo -e "${space}echo; echo step: $step, depends on: $de, job name: $name, flag: $name.\$$indx $useTmp " >> $run
        
        #[ -z "$indx" ] && echo "${space}flag=${step}.$de.${name}"  >> $run || echo "${space}flag=${step}.$de.${name}.\$${indx}"  >> $run 
        echo "${space}([ -z \"$indx\" ] || [ -z \"\$${indx}\" ]) && flag=${step}.$de.${name} || flag=${step}.$de.${name}.\$${indx}"  >> $run
        echo "${space}flag=\${flag//\//_}" >> $run   # replace path / to _ 
        
        echo -e "${space}deps=\"\""  >> $run
        if [[ "$de" != "0" ]]; then
            if [[ "$de" == *\.* ]]; then
                for dep in ${de//\./ }; do
                    [ -z $sameloop ] && echo "${space}deps=\"\$deps \${jobID[$dep]}\"" >> $run || echo "${space}deps=\"\$deps \${jobIDs[$dep]}\"" >> $run
                done
            else    
                [ -z $sameloop ] && echo "${space}deps=\"\${jobID[$de]}\""  >> $run || echo "${space}deps=\"\${jobIDs[$de]}\""  >> $run 
            fi
        fi 
                
        # escape double quota. bsub does not need this? not sure
        cmd=${cmd//\"/\\\\\"}

        # replace space with ., if the job depends on something
        echo "${space}[ -z \"\${deps// /}\" ] && deps=null || deps=\${deps// /.}" >> $run

        #echo "echo command is: bsubRun \$xsub -flag \$deps \$cwd \$flag \"$cmd\" " >> $run
        [[ "$3" == "useTmp" && ! -z "$ref" ]] && echo "${space}setPath $ref" >> $run && cmd="rsyncToTmp ${ref//./ $}; $cmd"

        #cmd="{set -e; $cmd;}" # && touch \$cwd/\$flag.success || touch \$cwd/\$flag.failed" 
        cmd="set -e; $cmd" # && touch \$cwd/\$flag.success || touch \$cwd/\$flag.failed"      
       
        [ -z "$inputs" ] && inputs=none
        [ -z "$ref" ] && ref=none

        [[ "$4" == run ]] && echo "${space}id=\$(smartSbatch -L \$cwd -S $name -R ${ref//./$} -F \$flag -I ${inputs//./,$} -D \$deps $slurmAccount \${xsub#sbatch }  --wrap \"$cmd\" run)" >> $run  || echo "${space}id=\$(smartSbatch -L \$cwd -S $name -R ${ref//./$} -F \$flag -I ${inputs//./,$} -D \$deps $slurmAccount \${xsub#sbatch } --wrap \"$cmd\")"   >> $run

        #echo "[[ \"\$id\" == \"Submitted batch job \" ]] && id=\${id##*Submitted batch job } && id=\${id%% *} || id=\"\"" >> $run
        echo "${space}[[ \"\$id\" == *\"Submitted batch job \"* ]] && id=\${id##*Submitted batch job } && id=\${id%% *}">> $run

        [[ "$3" == "useTmp" && ! -z "$ref" ]] && echo "${space}setPathBack $ref" >> $run 
        #echo "echo id is: \$id ">> $run
        
        #echo "${space}if [ -z \"\$id\" ]; then"  >> $run
        #echo "${space}    echo  job \$flag is not submitted"  >> $run
        #echo "${space}    exit 1"  >> $run 
        echo "${space}if [[ \"\$id\" == *skipThisJob* ]]; then"  >> $run
        echo "${space}    jobID[$step]=\"\"" >> $run
        echo "${space}elif [[ \"\$id\" =~ ^[0-9]+\$ ]]; then"  >> $run
        #echo "${space}    touch \$cwd/\$flag.submitted" >> $run 
        
        echo "${space}    alljobs=\"\$alljobs \$id\"" >> $run 
        #echo "${space}    printf \"%-10s  %-20s  %-10s\n\" \$id \$deps \$flag >> \$cwd/flag/allJobs.txt"  >> $run 
        
        # tell this is out of the loop for the depending job (de), so that we clear the job id list for the next step with depends on 'de'
        if [[ "$de" == *\.* ]]; then
                for dep in ${de//\./ }; do
                     [ -z $sameloop ] && echo "${space}    startNewLoop[$dep]=\"no\""  >> $run || echo "    ${space}startNewLoop[$dep]=\"\""  >> $run 
                done
        else    
                [ -z $sameloop ] && echo "${space}    startNewLoop[$de]=\"no\""  >> $run || echo "    ${space}startNewLoop[$de]=\"\""  >> $run 
        fi
        
        echo "${space}    [ -z \${startNewLoop[$step]} ] && jobIDs[$step]=\"\" && startNewLoop[$step]=\"no\" " >> $run 
        echo "${space}    jobID[$step]=\$id"  >> $run
        echo "${space}    jobIDs[$step]=\${jobIDs[$step]}.\$id"  >> $run
        
        echo "${space}else" >> $run
        echo "${space}    echo  job \$flag is not submitted"  >> $run
        echo "${space}    exit 1"  >> $run 
        
        echo "${space}fi" >> $run 
        IFS=''
        cmd=""
    else
        echo "$t" >> $run
        #findjob=""
        if [[ "$i" == done* ]]; then
            echo find loop end: $i
            #space=${space%    }
            loper=${loper%.*}
        elif [[ "$i" == for* ]]; then
            echo; echo find loop start: $i
            #a=`echo $i | xargs`  # remove leading space and tailing space
            #a=${a#* }; a=${a%% *}
            #echo a is .$a.
            #loper="$loper.\$$a"
            loper="$loper.for"
            #echo new loper: $loper
        elif [[ "$i" == while* ]]; then
            echo; echo find loop start: $i
            #a=`echo $i | xargs`  # remove leading space and tailing space
            #a=whiele #${a#* }; a=${a%% *}
            #echo a is .$a.
            loper="$loper.while"
            #echo new loper: $loper    
        fi    
    fi   
done
[ $? == 1 ] && exit 0;

# go back to the original folder?
#echo "cd \$cwd/.." >> $run

echo "echo; echo All submitted jobs: " >> $run
echo "cat \$cwd/logs/allJobs.txt" >> $run 
echo "echo ---------------------------------------------------------" >> $run
[[ "$4" == run ]] || echo "echo Note: This is just a test run, so no job is actually submitted. In real run it should submit jobs and report as above." >> $run

echo "#cmd: $0 $@" >> $run

echo $run ${1#* } is ready to run. Starting to run ...

eval "/bin/bash $run ${1#* }"
