#!/bin/sh

#set -e
#set -x 

## notes: to estimate resource, need at least three jobs if no input size is given, and 5 jobs if there is input size given

## features for regular sbatch (when calling without -L)
# Auto adjust partition according to run-time request if they does not match up
# Auto check if slurm script exists
# Auto create output and erro folders if not exist
# Auto adjust memory and run time based on earlier mem time usage 
# Support re-run checking (using output as checkpoint)
# Auto adjust partition according to run-time request if they does not match up
# Auto adjust memory and run time based on earlier mem time usage
# Auto requeue job with double time when out of time
# Auto requeue job with double memory when out of memory
# Keep good log and send informative email

# Limitations: 
# does not take logs in logDir, does not take care of re-run because there is not unique flag for the job, does not take care of downstream jobs

# todo:

## features with smartPipeline
# Auto adjust partition according to run-time request if they does not match up
# Auto check if slurm script exists
# Auto create output and erro folders if not exist
# Auto adjust partition according to run-time request if they does not match up
# Auto adjust memory and run time based on earlier mem time usage
# Support re-run from breaking-point
# Auto requeue job with double time when out of time
# Auto requeue job with double memory when out of memory
# Keep good log and send informative email

# todo:


usage() { echo -e "Short Usage: \n${0##*/} [-L logDir (for smartPipline)]  [-S software] [-R reference] [-F uniqueJobFlag (for smartPieline)s] [-I inputList] [-D Dependencies (for smartPipeline)] [sbatch options] [run]\nDetail Detail Usage:\n${0##*/} [-L logDir, optional. Such as: ./], [-S software, optional. Such as: bowtie2-4core. If empty, use script name as software name] [-R reference, optional. Such as: hg19] [-F uniqueJobFlag, optional. Such as 1.bowtie.s1.fa] [-I inputFileOrFolderList, optional. Such as: read1.fq,read2.fq] [ -D dependent jobs] <regular sbatch options, optional. Such as: job.sh or -p short -c 1 -t 2:0:0 --mem 2G --wrap \"my_application para1 para2\"> [run, optional: run will submit job, empty will do a dry run without submitting a job.]"; exit 1; }

[ -z "$1" ] && usage

[[ "-h" == "$1" ]] && usage

[[ "--help" == "$1" ]] && usage

echo Running: $0 $@ 1>&2

cmd="ssbatch"
whitespace="[[:space:]]"
for i in "$@"; do
    if [[ $i =~ $whitespace ]]; then
        i="\"$i\""
    fi
    cmd="$cmd  $i"
done
echo $cmd

#comment="${SSBATCH_I}${SSBATCH_R}${SSBATCH_S}${SSBATCH_D}"

testRun=${@: -1} 

echo 
array=( "$@" )

# get the 6 parameters for ssbatch
for (( i=0; i<$(($#)); i++ )); do
    [ -z "${array[$i]}" ] && continue
#  	echo $i " / " $(($#)) " : " ${array[$i]}
  	case "${array[$i]}" in
        --comment=*     )   echo found --comment && comment="${array[$i]}" && array[$i]="" && arr=(${comment/--comment=/}) && for c in "${arr[@]}"; do eval $c; done;;
  	    "-L"            )   echo found -L && logDir="${array[$i+1]}" && array[$i]="" && array[$i+1]="";; 
  		--LogDir=*      )   echo found --LogDir && logDir="${array[$i]}" && logDir=${logDir/--LogDir=/} && array[$i]="";;
  		"-S" 			)   echo found -S && software="${array[$i+1]}" && array[$i]="" && array[$i+1]="";;
  		--Software=* 	)   echo Found --Software= && software="${array[$i]}" && software="${software/--Software=/}" && array[$i]="";;
  		"-R" 			)   echo Found -R && ref="${array[$i+1]}" && array[$i]="" && array[$i+1]="";;
  		--Ref=* 		)   echo Found --Ref= && ref="${array[$i]}" && ref="${ref/--Ref=/}" && array[$i]="";;
  		"-F" 			)   echo Found -F && flag="${array[$i+1]}" && array[$i]="" && array[$i+1]="";;
  		--Flag=* 	    )   echo Found --Flag= && flag="${array[$i]}" && flag="${flag/--Flag=/}" && array[$i]="";;
        "-I" 			)   echo Found -I && inputs="${array[$i+1]}" && array[$i]="" && array[$i+1]="";;
  		--Inputs=* 	    )   echo Found --Inputs= && inputs="${array[$i]}" && inputs="${inputs/--Inputs=/}" && array[$i]="";;
        "-D"            )   echo Found -D  && deps="${array[$i+1]}" && array[$i]="" && array[$i+1]="";;
        "--Dependency=" )   echo Found -D  && deps="${array[$i]}" && deps="${deps/--Dependency=/}" && array[$i]="";;
        *               )   echo Found sbatch options &&  sbatchLocation=$i && break
    esac
done 

[ -z "$logDir" ] && set -- "$@" run && testRun=run

echo options before sbatch options: slurmAcc: $slurmAcc logDir: $logDir software: $software ref: $ref jobFlag: $flag inputs: $inputs deps: $deps

#exit

depsO=$deps 

#echo -e "Parameters:\n${array[*]} " 
echo Parsing sbatch command... 
for (( i=$sbatchLocation; i<`[[ "$testRun" == "run" ]] && echo $(($# -1))  || echo $(($#))`; i++ )); do
#for (( i=$sbatchLocation; i< $(($#)); i++ )); do
    [ -z "${array[$i]}" ] && continue
#  	echo $i " / " $(($#)) " : " ${array[$i]}
  	case "${array[$i]}" in
  	    "-p"            )   echo Found -p && partition="${array[$i+1]}" && array[$i]="" && array[$i+1]="";; # will set partition later
  		--partition=*   )   echo Found --partition && partition="${array[$i]}" && partition=${partition/--partition=/} && array[$i]="";;
  		--mem-per-cpu=* ) 	echo Found --mem-per-cpu= && mem1="${array[$i]}" && mem1="${mem1/--mem-per-cpu=/}";;
  		"-c" 	 		) 	echo Found -c && core="${array[$i+1]}";;
  		--cpus-per-task=*)  echo Found --cpus-per-task= && core="${array[$i]}" && core="${core/--cpus-per-task=/}";;
  		"-n" 	 		) 	echo Found -n && task="${array[$i+1]}";;
  		--ntasks=*      )   echo Found --ntasks= && task="${array[$i]}" && task="${task/--ntasks=/}";;
  		"-N" 	 		) 	echo Found -N && node="${array[$i+1]}" && array[$i]="" && array[$i+1]="";;
  		--nodes=*       )   echo Found --nodes= && node="${array[$i]}" && node="${node/--nodes=/}" && array[$i]="";;
  		"--mem"  		) 	echo Found --mem && mem="${array[$i+1]}"&& array[$i]="" && array[$i+1]="";; # will set memory later
  		--mem=* 		)  	echo Found --mem= && [ -z "$mem" ] && mem="${array[$i]}" && mem=${mem/--mem=/} && array[$i]="";;
  		"-t" 			)   echo Found time && time="${array[$i+1]}" && array[$i]="" && array[$i+1]="";;
  		--time=* 		)   echo Found --time= && time="${array[$i]}" && time="${time/--time=/}" && array[$i]="";;
  		"-o" 			)   echo Found -o && out="${array[$i+1]}" && array[$i]="" && array[$i+1]="";;
  		--output=* 		)   echo Found --output= && out="${array[$i]}" && out="${out/--oupput=/}" && array[$i]="";;
  		"-e" 			)   echo Found -o && err="${array[$i+1]}" && array[$i]="" && array[$i+1]="";;
  		--error=* 		)   echo Found --error= && err="${array[$i]}" && err="${err/--error=/}" && array[$i]="";;
        "-A"            )   echo Found -A  && [ -z "$slurmAcc" ] && slurmAcc="-A ${array[$i+1]}" && array[$i]="" && array[$i+1]="";;
        "-d" 			)   echo Found -d && dep="${array[$i+1]}";;
  		--dependency=* 	)   echo Found --dependency= && dep="${array[$i]}" && dep="${dep/--dependency=/}";;
  		
    esac
    #[ ! -z "$out" ] &&  CMDWithoutWrap="$CMDWithoutWrap -o $out" && CMDWithoutSlurmCMD="$CMDWithoutSlurmCMD -o $out"
    #[ ! -z "$err" ] &&  CMDWithoutWrap="$CMDWithoutWrap -e $err" && CMDWithoutSlurmCMD="$CMDWithoutSlurmCMD -e $err"
    [ -z "$wrapCMD" ] && [[ ${array[$i]} == "--wrap" ]] && echo Found --wrap ${array[$i+1]} && wrapCMD="${array[$i+1]}" && array[$i]="" && array[$i+1]="" 
  	[ -z "$wrapCMD" ] && [[ ${array[$i]} ==	--wrap=* ]] && echo Found --wrap= && wrapCMD="${array[$i]}" && wrapCMD="${wrapCMD/--wrap=}" && array[$i]="" || CMDWithoutWrap="$CMDWithoutWrap ${array[$i]}"
    [ -z "$slurmScript$wrapCMD" ] && [ -f "${array[$i]}" ] && echo Found slurmScript ${array[$i]} && slurmScript="${array[$i]}" && array[$i]=""
    [ -z "$slurmScript" ] && CMDWithoutSlurmCMD="$CMDWithoutSlurmCMD ${array[$i]}" || slurmScriptParas="$slurmScriptParas ${array[$i]}"
done 

echo 
echo Parsing result from sbatch commandline: 
echo sbatch options: partition: $partition time: $time mem: $mem mem-per-cpu: $mem1 task: $task core: $core node: $node out: $out err: $err dep: $dep

if [ -z "$slurmScript" ]; then
    echo wrapCMD: $wrapCMD 
    echo additional sbatch parameter: $CMDWithoutWrap 
else 
    echo additional sbatch parameter: $CMDWithoutSlurmCMD
    echo slurmScript: $slurmScript 
    echo slurmScriptParas: $slurmScriptParas
fi
echo test or run: $testRun

#stamp=`date -d "today" +"%Y.%m.%d.%H.%M-%N"`

if [ ! -z "$slurmScript" ]; then 
  echo Validating slurmScript: 
  firstRow=`head -n 1 $slurmScript`
  echo FirstRow of the script: $firstRow
  [[ "$firstRow" =~ ^#\!/bin/bash ]] || [[ "$firstRow" =~ ^#\!/usr/bin/bash ]] || [[ "$firstRow" =~ ^#\!/bin/sh ]] || [[ "$firstRow" =~ ^#\!/usr/bin/sh ]]|| { echo "Error: first row of the slurm script ($slurmScript) does not start with #!/bin/bash, #!/usr/bin/bash, #!/bin/sh, #!/usr/bin/sh";  exit 1;}
fi

[ -z "$wrapCMD" ] && [ -z "$slurmScript" ] && echo Error: Did not find --wrap, did not find slurmScript either. && exit 1 

if [[ ! -z "$slurmScript" ]]; then 
    echo 
    echo Parsing slurm script ... 
    while IFS=$'\n' read line; do
        echo Got line: $line
        arr=($line)
        if [[ ${arr[0]} == "#SBATCH" ]]; then 
            case "${arr[1]}" in 
                # "-L"            )   echo found -L && [ -z "$logDir" ] && logDir=${arr[2]};; 
                # --LogDir=*  )   echo found --LogDir && [ -z "$logDir" ] && logDir="${arr[1]}" && logDir="${logDir/--LogDir=/}";;
                # "-S" 			)   echo found -S && [ -z "$software" ] && software=${arr[2]};;
                # --Software=* 	)   echo Found --Software= && [ -z "$software" ] && software="${arr[1]}" && software="${software/--Software=/}";;
                # "-R" 			)   echo Found -R && [ -z "$ref" ] && ref=${arr[2]};;
                # --Ref=* 		)   echo Found --Ref= && [ -z "$ref" ] && ref="${arr[1]}" && ref="${ref/--Ref=/}";;
                # "-F" 			)   echo Found -F && [ -z "$flag" ] && flag=${arr[2]};;
                # --Flag=* 	    )   echo Found --Flag= && [ -z "$flag" ] &&  flag="${arr[1]}" && flag="${flag/--Flag=/}";;
                # "-I" 			)   echo Found -I &&  [ -z "$inputs" ] && inputs=${arr[2]};;
                # --Inputs=* 	    )   echo Found --Inputs= &&  [ -z "$inputs" ] && inputs="${arr[1]}" && inputs="${inputs/--Inputs=/}";;
                # "-D"            )   echo Found -D  &&  [ -z "$deps" ] &&deps=${arr[2]};;
                # "--Dependency"  )   echo Found -D  &&  [ -z "$deps" ] &&deps="${arr[1]}" && deps="${deps/--Dependency/}";;
                --comment=*    )   echo found --comment && comment="${arr[1]}" && ar=(${comment/--comment=/}) && for c in "${ar[@]}"; do v=${c%=*}; [ -z "${!v}" ] && eval $c; done;;
                
                "-A"   )   echo Found -A  && [ -z "$slurmAcc" ] && slurmAcc="-A ${arr[2]}";;
                "--mem" ) [ -z "$mem" ] && echo Found --mem && mem="${arr[2]}";;
                --mem=* ) [ -z "$mem" ] && echo Found --mem= && mem="${arr[1]}" && mem="${mem/--mem=/}";;
                "--mem-per-cpu") [ -z "$mem1" ] && echo Found --mem-per-cpu && mem1="${arr[2]}";;
                --mem-per-cpu=*) [ -z "$mem1" ] && echo Found --mem-per-cpu= && mem1="${arr[1]}" && mem1="${mem1/--mem-per-cpu=/}";; 
                "-c"    ) [ -z "$core" ] && echo Found -c && core="${arr[2]}";;
                --cpus-per-task=* ) [ -z "$core" ] && echo Found --cpus-per-task= && core="${arr[1]}" && core="${core/--cpus-per-task=/}";;
                "-n"    ) [ -z "$task" ] && echo Found -n && task="${arr[2]}";;
                --ntasks=* ) [ -z "$task" ] && echo Found --ntasks= && task="${arr[1]}" && task="${task/--ntasks=/}";;
                "-N"    ) [ -z "$node" ] && echo Found -N && node="${arr[2]}";;
                --nodes=*   ) [ -z "$node" ] && echo Found --nodes= && node="${arr[1]}" && node="${node/--nodes=/}";;
                "-t"    ) [ -z "$time" ] && echo Found -t && time="${arr[2]}";;
                --time=* ) [ -z "$time" ] && echo Found --time= && time="${arr[1]}" && time="${time/--time=/}";;    
                "-o"    ) [ -z "$out" ] && echo Found -o && out="${arr[2]}";;
                --output=* ) [ -z "$out" ] && echo Found --output= && out="${arr[1]}" && out="${out/--output=/}";;
                "-e" ) [ -z "$err" ] && echo Found -e && err="${arr[2]}";;
                --error=* ) [ -z "$err" ] && echo Found --error= && err="${arr[1]}" && err="${err/--error=/}";;
                
                "-d"    ) [ -z "$dep" ] && echo Found -d && dep="${arr[2]}";;
                --dependency=* ) [ -z "$dep" ] && echo Found --dependency= && dep="${arr[1]}" && dep"${dep/--dependency=/}";;
            esac
        fi     
    done < $slurmScript 


    echo
    echo Parsing result from slurm script:  
    echo time: $time mem: $mem mem-per-cpu: $mem1 task: $task core: $core node: $node out: $out err: $err dep: $dep

    echo slurmScript: $slurmScript 
    echo additional sbatch parameter: $CMDWithoutSlurmCMD
    echo slurmScriptParas: $slurmScriptParas
fi

[ -z "$SSBATCH_S" ] || software="$SSBATCH_S"
[ -z "$SSBATCH_R" ] || ref="$SSBATCH_R"
[ -z "$SSBATCH_I" ] || inputs="$SSBATCH_I"
[ -z "$SSBATCH_D" ] || deps="$SSBATCH_D"

[ -z "$out" ] && out=slurm-%j.out  
[ -z "$err" ] && err=slurm-%j.err

# this is not pipeline
if [ -z "$logDir" ]; then  
    #[ -z "$software" ] && software=regularSbatch
    tm=`mktemp XXXXXXXX --dry-run`
    if [ -z "$software" ]; then
        if [ ! -z "$wrapCMD" ]; then
            arr=($wrapCMD)
            # need remove the parameters, to get unique name for job types
            if [[ "${arr[0]}" == sh || "${arr[0]}" == bash || "${arr[0]}" == python || ""${arr[0]}" == python3  || "${arr[0]}" == matlab || ""${arr[0]}" == Rscript ]]; then
            software="${arr[1]}" 
                else
            software="${arr[0]}"
            fi
            software=${software##*/}
        else
            software=${slurmScript##*/}
            #[ -z "$flag" ] && flag=$ref.${slurmScriptParas// /}.$tm
        fi
    fi
    job=${out/\%j\.out/$tm}.sh
    succFlag=${out/\%j\.out/$tm}.success
    flag="$out $job $err"
    
    #echo -e "#!/bin/bash\n\n" > $job 
    ##SBATCH -e $err\n#SBATCH -o $out\n" > $job
else 
    [ -d "$logDir" ] || { echo Directory not exist: $logDir; usage; }
    [ -z "$software" ] && { echo software is emtpty; usage; }
    flag=${flag//\//-}

    flagDir=$logDir/logs
    [ ! -d $flagDir ] && mkdir $flagDir 
    job=$flagDir/$flag.sh
    #echo -e "#!/bin/bash\n\n" > $job
    #submitFlag=$flagDir/$flag.submitted
    succFlag=$flagDir/$flag.success
    failFlag=$flagDir/$flag.failed
    #startFlag=$flagDir/$flag.start
    killFlag=$flagDir/$flag.user.killed
    outFlag=$flagDir/$flag.out
    errFlag=$flagDir/$flag.err
    deps=${deps#.}        
fi    

# load partition config file
x=`realpath $0` 
source ${x%\/bin\/ssbatch}/config/partitions.txt || { echo Partition list file not found: partition.txt; exit 1; }

[ -z "$ref" ] && ref=none
[ -z "$inputs" ] && inputs=none
[ -z "$deps" ] && deps=null


if [ -z "$mem" ]; then
    if [ -z "$mem1" ]; then
        mem=$defaultMem
    else
        [[ "$mem1" == *G ]] && mem=$(( ${mem1%G} * $core ))G || mem=$(( ${mem1%M} * $core ))M
    fi
fi



if [[ $deps == null ]]; then
    deps=""
    #echo Depend on no job >&2 
    resAjust="#Depend on no job\n"
    
elif [[ $deps == ${deps/\./} ]]; then
    #echo Depend on single job >&2 
    resAjust="#Depend on single job\n"
    deps="--dependency=afterok:${deps/\./}"
else
    #echo Depend on multiple jobs >&2
    resAjust="#Depend on multiple jobs\n"
    tmp=""
    for t in ${deps//\./ }; do
        #echo working on $t >&2
        tmp="$tmp:$t"
    done
    [ ! -z "$tmp" ] && deps="--dependency=afterok$tmp"
fi

# check job done before or not
if [[ ! -z "$logDir" && "$testRun" == "run" ]]; then 
    if [ -f $succFlag ]; then
        stepID=${flag%%.*}
        if ([ -f $flagDir/skipAllSuccessJobs.txt ] || [ -f $flagDir/skipAllSuccessJobs$stepID.txt ]) && [ -z "$deps" ]; then 
            echo skipThisJob
            exit    
        elif [[ "$te"  != test ]] && [ ! -f $flagDir/reRunAllSuccessJobs.txt ] && [ ! -f $flagDir/reRunAllSuccessJobs$stepID.txt ] && [ -z "$deps" ]; then
            stepName=${flag#*.}; stepName=${stepName#*.}; stepName=${stepName%%.*}
            echo $flag was done before, do you want to re-run it? >&2
            echo -e "y:        To re-run this job, press y, then enter key." >&2
            echo -e "ystep:    To re-run all jobs for step $stepID: $stepName, type ystep, then press enter key." >&2
            echo -e "yall:     To re-run all jobs, type yall, then press enter key." >&2
            echo -e "enter:    To not re-run this job, directly press enter key." >&2
            echo -e "nstep:    To not re-run all successful jobs for step $stepID: $stepName, type nstep, then press enter key." >&2
            echo -e "nall:     To not re-run all successful jobs, type nall, then press enter key." >&2
            read -p "" x </dev/tty

            if [[ "$x" == "y" ]]; then
                echo "Will re-run the down stream steps even if they are done before (because they have deps - see code in row 70)." >&2 
            elif [[ "$x" == "ystep" ]]; then 
                touch $flagDir/reRunAllSuccessJobs$stepID.txt
            elif [[ "$x" == "nstep" ]]; then
                touch $flagDir/skipAllSuccessJobs$stepID.txt
                echo skipThisJob
                exit
            elif [[ "$x" == "yall" ]]; then 
                touch $flagDir/reRunAllSuccessJobs.txt
            elif [[ "$x" == "nall" ]]; then
                touch $flagDir/skipAllSuccessJobs.txt
                echo skipThisJob
                exit    
            else
                echo skipThisJob
                exit
            fi  
        fi
        #echo
        #rm $succFlag
        #ls -l $flagDir/ 1>&2 
    fi    
    #ls $flagDir/$flag.* 1>&2
    rm $flagDir/$flag.* 2>/dev/null || echo # in case user has set -e and file not exist,  we will not exit
fi

[ -z "$time" ] && time=$defaultTime

# original mem and time 
memO=$mem; timeO=$time
inputSize=0

echo 
echo Check if there input file list and this job does not depend on other jobs

# not depends on other job, and there is input file list
if [ -z "$dep" ] &&  [[ "$inputs" != "none" ]]; then
    inputSize=`{ du --apparent-size -c -L ${inputs//,/ } 2>/dev/null || echo notExist; } | tail -n 1 | cut -f 1`

    if [[ "$inputSize" == "notExist" ]]; then 
        #echo Some or all input files not exist: $inputs >&2
        resAjust="$resAjust#Some or all input files not exist: $inputs\n"
    else 
        #inputSize=$(($inputSize/1024)); # convert to M      
        #echo inputSize: $inputSize  >&2
        resAjust="$resAjust#inputSize: $inputSize\n"
        #rm ~/.rcbio/$software.$ref.mem.stat.final # for testing 
        # there is a job record curve fit already?    
        
        if [ ! -f ~/smartSlurm/stats/$software.${ref//\//-}.mem.stat.final ]; then   
            mkdir -p ~/smartSlurm/stats/
            echo Do not have a formula. Let us build one... >&2
            resAjust="$resAjust#Do not have a formula. Let us build one..\n"
            jobStatistics.sh $software ${ref//\//-} 4 1>&2
            
            justRunStats=yes
        fi
        if [ -f ~/smartSlurm/stats/$software.${ref//\//-}.mem.stat.final ]; then    
            output=`estimateMemTime.sh $software ${ref//\//-} $inputSize`
            if [[ "$output" == "outOfRange" ]]; then 
                #echo Input size is too big for the curve to estimate! >&2
                resAjust="$resAjust#Input size is too big for the curve to estimate!\n"
                if [ -z "$justRunStats" ]; then 
                    #echo Delete the curve and try to re-run the statistics. >&2
                    resAjust="$resAjust#Delete the curve and try to re-run the statistics. \n"
                    rm ~/smartSlurm/stats/$software.${ref//\//-}.mem.stat.final ~/smartSlurm/stats/$software.${ref//\//-}.time.stat.final || echo # in case user has set -e and file not exist,  we will not exit
                    jobStatistics.sh $software ${ref//\//-} 4 1>&2 
                    if [ -f ~/smartSlurm/stats/$software.${ref//\//-}.mem.stat.final ]; then    
                        output=`estimateMemTime.sh $software ${ref//\//-} $inputSize`
                        if [[ "$output" == "outOfRange" ]]; then 
                            #echo Input size is too big for the curve to estimate! Use default mem and runtime to submit job. >&2
                            resAjust="$resAjust#Input size is too big for the curve to estimate! Use default mem and runtime to submit job.\n"
                        else
                            mem=$((${output% *}+5))M; time=$((${output#* }+5));     
                            #echo Got estimation based on inputsize: $inputSize mem: $mem  time: $time >&2
                            resAjust="$resAjust#Got estimation based on inputsize: $inputSize mem: $mem  time: $time\n"
                        fi 
                    else 
                        #echo Building formula failed. Use default mem and runtime to submit job. >&2
                        resAjust="$resAjust#Building formula failed. Use default mem and runtime to submit job.\n"
                    fi
                else 
                    #echo Use default mem and runtime to submit job.    >&2
                    resAjust="$resAjust#Use default mem and runtime to submit job.\n"
                fi    
            else
                mem=$((${output% *}+500))M; time=$((${output#* }+20));     
                #echo Got estimation inputsize: $inputSize mem: $mem  minutes: $time !!!>&2
                resAjust="$resAjust#Got estimation inputsize: $inputSize mem: $mem  minutes: $time !!!\n"
            fi 
        else 
            #echo Building formula failed. Use default mem and runtime to submit job. >&2
            resAjust="$resAjust#Building formula failed. Use default mem and runtime to submit job.\n"
        fi
    fi
# do not have input file list    #todo: we can try to figure out the input from the software parameters here
elif [[ "$inputs" == "none" ]]; then
    ref=${ref//\//-}
    txt=(`cat ~/smartSlurm/stats/$software.$ref.mem.stat.noInput 2>/dev/null`)
    
    # empty or more than 5 minutes but less than 3 records
    if [[ ${#txt[@]} -eq 0 || ( $(($(date +%s) - ${txt[-1]})) -ge 300 && ${#txt[@]} -le 3 ) ]]; then  
        mkdir -p ~/smartSlurm/stats/
    #if [ ! -f ~/smartSlurm/stats/$software.$ref.mem.stat.noInput ] && [ -z "`find ~/smartSlurm/stats/jobRecord.txt -mmin -5`" ]; then  
    
        #cat /home/*/smartSlurm/stats/myJobRecord.txt > ~/smartSlurm/stats/jobRecord.txt 
        cat $HOME/smartSlurm/myJobRecord.txt > ~/smartSlurm/jobRecord.txt

        OUT="$(mktemp -d)"
        #if [ -s ~/smartSlurm/stats/jobRecord.txt ]; then 
          #filter by software and reference
            # grep COMPLETED ~/smartSlurm/stats/jobRecord.txt | awk -F, -v a=$software -v b=$ref '{ if($3 == a && $4 == b) {print $13 }}' | sort -rn > ~/smartSlurm/stats/$software.$ref.mem.stat.noInput
            # grep COMPLETED ~/smartSlurm/stats/jobRecord.txt | awk -F, -v a=$software -v b=$ref '{ if($3 == a && $4 == b) {print $14 }}' | sort -rn > ~/smartSlurm/stats/$software.$ref.time.stat.noInput
        
        
          txt=($({ grep COMPLETED ~/smartSlurm/jobRecord.txt | awk -F, -v a=$software -v b=$ref '{ if($12 == a && $13 == b) {print $7 }}' | sort -rn ; date +%s; } | tee  ~/smartSlurm/stats/$software.$ref.mem.stat.noInput))
     
            grep COMPLETED ~/smartSlurm/jobRecord.txt | awk -F, -v a=$software -v b=$ref '{ if($12 == a && $13 == b) {print $8 }}' | sort -rn > ~/smartSlurm/stats/$software.$ref.time.stat.noInput
         #   [ -s ~/smartSlurm/stats/$software.$ref.mem.stat.noInput ] || rm ~/smartSlurm/stats/$software.$ref.mem.stat.noInput        
         #   [ -s ~/smartSlurm/stats/$software.$ref.time.stat.noInput ] || rm ~/smartSlurm/stats/$software.$ref.time.stat.noInput
        #else
        #    rm ~/smartSlurm/stats/jobRecord.txt
        
        
        #cat ~/smartSlurm/stats/$software.$ref.mem.stat.noInput   
        #cat ~/smartSlurm/stats/$software.$ref.time.stat.noInput  
        
        if [ -s ~/smartSlurm/stats/$software.$ref.mem.stat.noInput ] && [ -s ~/smartSlurm/stats/$software.$ref.time.stat.noInput ]; then 
        
            paste ~/smartSlurm/stats/$software.$ref.time.stat.noInput ~/smartSlurm/stats/$software.$ref.mem.stat.noInput | column -s $'\t' -t | sed '$ d' > ~/smartSlurm/stats/$software.$ref.timeMem.noInput.txt

            cp ~/smartSlurm/stats/$software.$ref.timeMem.noInput.txt $OUT/timeMem.txt
            cd $OUT
            # make plot and calculate statistics
    gnuplot -e 'set term pdf; set output "timeMem.pdf"; set title "Time vs. Memory Usage" font "Helvetica Bold,18"; set xlabel "Time(Min)"; set ylabel "Memory(M)"; f(x)=a*x+b; fit f(x) "timeMem.txt" u 1:2 via a, b; t(a,b)=sprintf("f(x) = %.2fx + %.2f", a, b); plot "timeMem.txt" u 1:2,f(x) t t(a,b); print "Finala=", a; print "Finalb=",b; stats "timeMem.txt" u 1 ' 2>&1 | grep 'Final\| M' | awk 'NF<4{print $1, $2}' |sed 's/:/=/' | sed 's/ //g' > $software.$ref.timeMem.stat.noInput.txt

            cd - 
            convert $OUT/timeMem.pdf -background White -flatten ~/smartSlurm/stats/$software.$ref.stat.noInput.pdf 2>/dev/null
            pdftoppm ~/smartSlurm/stats/$software.$ref.stat.noInput.pdf  -png > ~/smartSlurm/stats/$software.$ref.stat.noInput.png 2>/dev/null
        
        fi
    fi

    # at least 3 records
    if [ ${#txt[@]} -ge 4 ]; then

    #if [ -f ~/smartSlurm/stats/$software.$ref.mem.stat.noInput ]; then 
        #totalRow=`wc -l < ~/smartSlurm/stats/$software.$ref.mem.stat.noInput`
        #if [[ ! -z "$totalRow" && $totalRow -ge 3 ]]; then 
            cutoffRow=$(( (${#txt[@]} - 1)  / 10 )) # top 10
            
            mem=${txt[$cutoffRow]}; mem=$((${mem/\.*/} + 500))M
            
            time=`head -n $((cutoffRow+1)) ~/smartSlurm/stats/$software.$ref.time.stat.noInput | tail -n 1`        
            time=$((time + 20))
            #echo Got estimation based on software.reference: $software.$ref mem: $mem minutes: $time !!! >&2
            resAjust="$resAjust#Got estimation based on software.reference: $software.$ref mem: $mem minutes: $time !!!\n"
        else 
            #echo There is less than 3 records. Exiting... >&2
            resAjust="$resAjust#There is less than 3 records. Exiting...\n"
          #  rm ~/smartSlurm/stats/$software.$ref.mem.stat.noInput ~/smartSlurm/stats/$software.$ref.time.stat.noInput   
        #fi
    fi
fi

echo

[ -z "$time" ] && { echo did not find time limit >&2; exit 1; }
 
[ -z "$mem" ] && { echo did not find mem limit >&2; exit 1; } 

[ -z "$core" ] && { [ ! -z "$task" ] && core="$task" || core=1; } 

[[ "$time" == *-* ]] && { day=${time%-*}; tem=${time#*-}; hour=${tem%%:*}; min=${tem#*:}; min=${min%%:*}; sec=${tem#$hour:$min}; sec=${sec#:}; } || { [[ "$time" =~ ^[0-9]+$ ]] && min=$time || { sec=${time##*:}; min=${time%:*}; min=${min##*:}; hour=${time%$min:$sec}; hour=${hour%:}; day=0;} }

[ -z "$day" ] && day=0; [ -z "$hour" ] && hour=0; [ -z "$min" ] && min=0;[ -z "$sec" ] && sec=0

#echo day $day,  hour $hour,  min $min,  sec $sec >&2
resAjust="$resAjust#day $day,  hour $hour,  min $min,  sec $sec"

# how many hours for sbatch command
hours=$(($day * 24 + $hour + ($min + 59 + ($sec + 59) / 60 ) / 60))

#echo looking partition for hour: $hours 

partition=`adjustPartition $hours $partition`

time=$day-$hour:$min:$sec

# 10 minutes less than the time in sbatch command
#seconds=$(($day * 24 * 60 * 60 + $hour * 60 * 60  + $min * 60 + $sec - 600))

#[ $seconds -le 60 ] && time=11:0 && seconds=60

#echo srun seconds: $seconds

#timeN=`eval "echo $(date -ud "@$seconds" +'$((%s/3600/24))-%H:%M:%S')"`

#echo New time for srun: $timeN

#echo 

# mem for srun is 10M less than sbatch command
#[[ "$mem" == *G ]] && memN=$(( 1024 * ${mem%G} -10 ))M || memN=$(( ${mem%M} -10 ))M

#[ ${memN%M} -le 1 ] && { echo Error: --mem for sbatch command should bigger than 11M; usage; }
#[ ${memN%M} -le 1 ] && mem=11M && memN=10M

#echo Mew mem for srun: $memN

#[ -z "$out" ] && out="slurm-\$SLURM_JOBID.out"
#[ -z "$err" ] && err="slurm-\$SLURM_JOBID.err"

echo 
echo Building new sbatch command ... >&2
#echo "#!/bin/bash" > $job 

echo -e "#!/bin/bash\n$resAjust\n\ntrap \"{ cleanUp.sh \\\"$logDir\\\" \"$software\" \"${ref//\//-}\" \\\"$flag\\\" \"$inputSize\" \"$core\" \"$memO\" \"$timeO\" \"$mem\" \"$time\" \"$partition\"  \\\"${slurmAcc#*-A }\\\" \\\"$0 $@\\\"; }\" EXIT\n" > $job

if [ -z "$slurmScript" ]; then 
    #echo "touch $startFlag" >> $job
    wrapCMD=`echo $wrapCMD | xargs echo -n`; wrapCMD=${wrapCMD%;} # remove ending space and ; from command
    echo "srun -n 1 $slurmAcc bash -e -c \"{ $wrapCMD; } && touch $succFlag\"" >> $job 
else 
    grep "^#SBATCH" $slurmScript >> $job || echo >> $job
    #echo "touch $startFlag" >> $job
    echo "srun -n 1 $slurmAcc bash -e -c \"{ sh $slurmScript $slurmScriptParas; } && touch $succFlag\"" >> $job 
fi
#echo "sleep 15 # wait slurm get the job status into its database" >> $job 

#echo "echo Job done. Summary:" >> $job 

# echo "sacct --format=JobID,Submit,Start,End,MaxRSS,State,NodeList%30,Partition,ReqTRES%30,TotalCPU,Elapsed%14,Timelimit%14 --units=M -j \$SLURM_JOBID" >> $job 
# #echo SLURM_JOBID=\$SLURM_JOBID >> $job

# echo "emailAndRecord.sh \"$software\" \"${ref//\//-}\" \"$flag\" \"$inputSize\" \"$core\" \"$memO\" \"$timeO\" \"$mem\" \"$time\"" >> $job #  >/dev/null" >> $job 

# echo "adjustDownStreamJobs.sh $flagDir $flag" >> $job 

# echo "[ -f $succFlag ] ||  { touch $failFlag; exit 1; }" >> $job

#[ -z "$dir" ] && dir="./" || mkdir -p $dir

## todo: need fix this when path not starting with /
[ -z "$out" ] || ( [[ "$out" == /* ]] && mkdir -p $(dirname $out) || mkdir -p $dir/$(dirname $out) )
[ -z "$err" ] || ( [[ "$err" == /* ]] && mkdir -p $(dirname $err) || mkdir -p $dir/$(dirname $err) )

# [ -f $outFlag ] && [ ! -z "$out" ] && [[ ! $outFlag == "$out" ]] && echo ln -s $outFlag $out >> $job
# [ -f $errFlag ] && [ ! -z "$err" ] && [[ ! $errFlag == "$err" ]] && echo ln -s $errFlag $err >> $job

if [ -z "$logDir" ]; then
    cmd="/usr/bin/sbatch --mail-type=FAIL --requeue --parsable -p $partition --mem $mem -t $time --open-mode=append $slurmAcc"
else
    cmd="/usr/bin/sbatch --mail-type=FAIL --requeue --parsable -p $partition --mem $mem -t $time --open-mode=append -o $outFlag -e $errFlag -J $flag $deps $slurmAcc"
    #rm $startFile $failFile $flag.failed $flag.killed # 2>/dev/null  || echo 
fi
if [ -z "$slurmScript" ]; then 
    cmd="$cmd $CMDWithoutWrap $job" 
else 
    cmd="$cmd $CMDWithoutSlurmCMD $job $slurmScriptParas" 
fi



echo -e "\n#Command used to submit the job:" >> $job
echo "#$cmd" >> $job 

echo New sbatch command to submit job: 
echo $cmd 
if [[ "$testRun" == "run" ]]; then
    echo Start submtting job...
    #output=`$cmd`
    #echo $output
    jobID=`$cmd`
    
    echo Output is: $jobID
    #touch $submitFlag  
else 
    jobID=$(date +"%4N")
    #echo This is a testing, not really running a job...
    echo "This is testing, so no job is submitted. In real run it should submit job such as: Submitted batch job $jobID"
    #jobID=
fi    

# add this to the job script
echo -e "\n#Sbatch command output:\n#Submitted batch job $jobID" >> $job 

# print out on screen
#echo -e "Sbatch command output:\nSubmitted batch job $jobID"

#dep=${dep#afterok}; dep=${dep//:/.}; [ -z "$dep" ] && dep=null 

# for check dependency, rerun, kill downstream jobs, estimate memmory and run time
#[[ "$jobID" =~ ^[0-9]+$ ]]  &&  echo $jobID $dep $flag $software $ref $inputs >> $flagDir/allJobs.txt

if [ -z "$logDir" ]; then
    out=${out/\%j/$jobID}; 
    ln -s $job ${out/\.out/}.sh
else
    printf "%-10s  %-20s  %-10s %-10s %-10s %-10s\n" $jobID $depsO $flag $software $ref $inputs>> $flagDir/allJobs.txt;
fi

echo New slurmScirpt is ready. The content is: >&2
cat $job >&2

echo Submitted batch job $jobID
