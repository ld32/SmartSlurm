#!/bin/sh

# features:
# Auto adjust partition according to run-time request if they does not match up
# Auto check if slurm script exists
# Auto create workding directory if not exist
# Auto create output and erro folders if not exist

# todo:
# 
#

#set -vx 
set -e 

echoerr() { echo -e "$@" 1>&2; exit 1; }

usage() { echoerr "Usage: \nssbatch <sbatch option1> <sbatch option 2> <sbatch option 3> ... \nSuch as: \nssbatch -p short -c 1 -t 2:0:0 --mem 2G --wrap \"my_application para1 para2\" \nor: \nssbatch job.sh"; }

[ -z "$1" ] || [[ "-h" == "$1" ]] && usage

array=("$@")

for (( i=0; i<$(($#)); i++ )); do
    [ -z "${array[$i]}" ] && continue
  	case "${array[$i]}" in
  	    "-D" 	 		) 	dir="${array[$i+1]}";;
  		--chdir=*       )   dir="${array[$i]}" && dir="${dir/--chdir=/}";;
        "-p"            )   partition="${array[$i+1]}" && array[$i]="" && array[$i+1]="";; # will set partition later
  		--partition=*   )   partition="${array[$i]}" && partition=${partition/--partition=/} && array[$i]="";;
        --mem-per-cpu=* ) 	memCPU="${array[$i]}" && memCPU="${memCPU/--mem-per-cpu=/}";;
  		"--mem"  		) 	mem="${array[$i+1]}";;
  		--mem=* 		)  	mem="${array[$i]}" && mem=${mem/--mem=/};;
        "-c" 	 		) 	core="${array[$i+1]}";;
  		--cpus-per-task=*)  core="${array[$i]}" && core="${core/--cpus-per-task=/}";;
        "-n" 	 		) 	task="${array[$i+1]}";;
  		--ntasks=*      )   task="${array[$i]}" && task="${task/--ntasks=/}";;
        "-N" 	 		) 	node="${array[$i+1]}";;
  		--nodes=*       )   node="${array[$i]}" && node="${node/--nodes=/}";;
  		"-t" 			)   time="${array[$i+1]}";;
  		--time=* 		)   time="${array[$i]}" && time="${time/--time=/}";;
  		"-o" 			)   out="${array[$i+1]}";;
  		--output=* 		)   out="${array[$i]}" && out="${out/--oupput=/}";;
  		"-e" 			)   err="${array[$i+1]}";;
  		--error=* 		)   err="${array[$i]}" && err="${err/--error=/}";;
        "-d" 			)   dep="${array[$i+1]}";;
  		--dependency=* 	)   dep="${array[$i]}" && dep="${dep/--dependency=/}";;  		
    esac
    [ -z "$wrapCMD" ] && [[ ${array[$i]} == "--wrap" ]] && wrapCMD="${array[$i+1]}" && array[$i]="" && array[$i+1]="" 
  	[ -z "$wrapCMD" ] && [[ ${array[$i]} ==	--wrap=* ]] && wrapCMD="${array[$i]}" && wrapCMD="${wrapCMD/--wrap=}" && array[$i]="" || CMDWithoutWrap="$CMDWithoutWrap ${array[$i]}"
    [ -z "$slurmScript$wrapCMD" ] && [ -f "${array[$i]}" ] && slurmScript="${array[$i]}" && array[$i]=""
    [ -z "$slurmScript" ] && CMDWithoutSlurmCMD="$CMDWithoutSlurmCMD ${array[$i]}" || slurmScriptParas="$slurmScriptParas ${array[$i]}"
done 


# if [ ! -z "$slurmScript" ]; then 
#   firstRow=`head -n 1 $slurmScript`
#   [[ "$firstRow" =~ ^#\!/bin/bash ]] || [[ "$firstRow" =~ ^#\!/usr/bin/bash ]] || [[ "$firstRow" =~ ^#\!/bin/sh ]] || [[ "$firstRow" =~ ^#\!/usr/bin/sh ]]|| { echoerr "Error: first row of the slurm script ($slurmScript) does not start with #!/bin/bash, #!/usr/bin/bash, #!/bin/sh, #!/usr/bin/sh"; }
# fi

[ -z "$wrapCMD" ] && [ -z "$slurmScript" ] && echoerr "Error: Could not find --wrap, could not find slurmScript either. File ${@: -1} does not exist! "

if [[ ! -z "$slurmScript" ]]; then 
    while IFS=$'\n' read line; do
        arr=($line)
        if [[ ${arr[0]} == "#SBATCH" ]]; then 
            case "${arr[1]}" in 
                "-D" 	) 	        [ -z "$dir" ] && dir="${arr[2]}";;
  		        --chdir=* )         [ -z "$dir" ] && dir="${arr[1]}" && dir="${dir/--chdir=/}";;
                "-p"    )           [ -z "$partition" ] && partition="${arr[2]}";;
  		        --partition=*)      [ -z "$partition" ] && partition="${arr[2]}" && partition=${partition/--partition=/};;
                "--mem-per-cpu")    [ -z "$memCPU" ] && memCPU="${arr[2]}";;
                --mem-per-cpu=*)    [ -z "$memCPU" ] && memCPU="${arr[1]}" && memCPU="${memCPU/--mem-per-cpu=/}";; 
                "--mem" )           [ -z "$mem" ] && mem="${arr[2]}";;
                --mem=* )           [ -z "$mem" ] && mem="${arr[1]}" && mem="${mem/--mem=/}";;
                "-c"    )           [ -z "$core" ] && core="${arr[2]}";;
                --cpus-per-task=* ) [ -z "$core" ] && core="${arr[1]}" && core="${core/--cpus-per-task=/}";;
                "-n"    )           [ -z "$task" ] && task="${arr[2]}";;
                --ntasks=* )        [ -z "$task" ] && task="${arr[1]}" && task="${task/--ntasks=/}";;
                "-N"    )           [ -z "$node" ] && node="${arr[2]}";;
                --nodes=*   )       [ -z "$node" ] && node="${arr[1]}" && node="${node/--nodes=/}";;
                "-t"    )           [ -z "$time" ] && time="${arr[2]}";;
                --time=* )          [ -z "$time" ] && time="${arr[1]}" && time="${time/--time=/}";;
                "-o"    )           [ -z "$out" ] && out="${arr[2]}" && out=${out/\%j/\$\{SLURM_JOBID\}} && out=${out/\%A/\$\{SLURM_ARRAY_JOB_ID\}} && out=${out/\%a/\$\{SLURM_ARRAY_TASK_ID\}};;
                
                --output=* )        [ -z "$out" ] && out="${arr[1]}" && out="${out/--output=/}" && out=${out/\%j/\$\{SLURM_JOBID\}} && out=${out/\%A/\$\{SLURM_ARRAY_JOB_ID\}} && out=${out/\%a/\$\{SLURM_ARRAY_TASK_ID\}};;
                
                "-e" )              [ -z "$err" ] && err="${arr[2]}" && err=${err/\%j/\$\{SLURM_JOBID\}} && err=${err/\%A/\$\{SLURM_ARRAY_JOB_ID\}} && err=${err/\%a/\$\{SLURM_ARRAY_TASK_ID\}};;
                
                --error=* )         [ -z "$err" ] && err="${arr[1]}" && err="${err/--error=/}" && err=${err/\%j/\$\{SLURM_JOBID\}}  && err=${err/\%A/\$\{SLURM_ARRAY_JOB_ID\}} && err=${err/\%a/\$\{SLURM_ARRAY_TASK_ID\}};;

                "-d"    )           [ -z "$dep" ] && dep="${arr[2]}";;
                --dependency=* )    [ -z "$dep" ] && dep="${arr[1]}" && dep="${dep/--dependency=/}";;
            esac
        fi     
    done < $slurmScript 
fi

[ -z "$dir" ] && dir="./" || mkdir -p $dir
[ -z "$out" ] || ( [[ "$out" == /* ]] && mkdir -p $(dirname $out) || mkdir -p $dir/$(dirname $out) )
[ -z "$err" ] || ( [[ "$err" == /* ]] && mkdir -p $(dirname $err) || mkdir -p $dir/$(dirname $err) )

[ -z "$time" ] && echoerr "did not find time limit"

[[ "$time" == *-* ]] && { day=${time%-*}; tem=${time#*-}; hour=${tem%%:*}; min=${tem#*:}; min=${min%%:*}; sec=${tem#$hour:$min}; sec=${sec#:}; } || { [[ "$time" =~ ^[0-9]+$ ]] && min=$time || { sec=${time##*:}; min=${time%:*}; min=${min##*:}; hour=${time%:$min:$sec}; } }

[ -z "$day" ] && day=0; [ -z "$hour" ] && hour=0; [ -z "$min" ] && min=0;[ -z "$sec" ] && sec=0

[[ "$day$hour$min$sec" =~ ^[0-9]+$ ]] || { echoerr Time format is not right day: $day hour: $hour min: $min sec: $sec; }

hours=$(($day * 24 + $hour + ($min + 59 + ($sec + 59) / 60 ) / 60))

x=`realpath $0` 
. ${x%\/bin*}/config/partitions.txt || echoerr "Partition list file not found: partition.txt"

partition=`adjustPartition $hours $partition`

cmd="/usr/bin/sbatch -p $partition" 
if [ -z "$slurmScript" ]; then 
	cmd="$cmd $CMDWithoutWrap --wrap=\"$wrapCMD\"" 
else 
	cmd="$cmd $CMDWithoutSlurmCMD $slurmScript $slurmScriptParas" 
fi

eval "$cmd" 
