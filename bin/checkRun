#!/bin/sh

#set -x

submttingLog=.smartSlurm.log

if [[ $1 == "-h" ||  $i == "--help" ]]; then
    echo "checkRun: This script can guild user to debug smartSlurm runs." 
    exit 1; 
fi
if [ -f ~/.smartSlurm/config/config.txt ]; then
    source ~/.smartSlurm/config/config.txt
else
    source $(dirname $0)/../config/config.txt || { echoerr Config list file not found: config.txt; exit 1; }
fi

#export smartSlurmLogDir=smartSlurmLog #log

[ -f .smartSlurm.log ] || { echo .smartSlurm.log is not found. Please go to the folder from which you ran runAsPipeline; exit; }

function loadData() {
    logFolders=`ls -d -t $smartSlurmLogDir $smartSlurmLogDir.*  $submttingLog* 2>/dev/null`

    [ -z "$logFolders" ] && echo Log folder name does not exist: $smartSlurmLogDir. Maybe you are not in the project folder? && usage 

    IFS=$'\n'

    # Cache file path and TTL (2 minutes)
    SQUEUE_CACHE_FILE="squeue_cache.txt"
    SQUEUE_CACHE_TTL=120

    # Check if cache exists and is recent enough
    if [ -f "$SQUEUE_CACHE_FILE" ]; then
        cache_mtime=$(stat -c %Y "$SQUEUE_CACHE_FILE")
        current_time=$(date +%s)
        if [ $((current_time - cache_mtime)) -lt $SQUEUE_CACHE_TTL ]; then
            activeJobs=$(cat "$SQUEUE_CACHE_FILE")
        else
            activeJobs=$(squeue -u $USER -t PD,R --noheader -o "%.18i-%t")
            echo "$activeJobs" > "$SQUEUE_CACHE_FILE"
        fi
    else
        activeJobs=$(squeue -u $USER -t PD,R --noheader -o "%.18i-%t")
        echo "$activeJobs" > "$SQUEUE_CACHE_FILE"
    fi

    RED='\033[0;31m'
    NC='\033[0m' # No Color
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'

    records=""; count=1; all=y 
    for i in $logFolders; do
        
        if [ -d $i ]; then 
            [ -f $i/allJobs.txt ] && nJobs=$(grep -v ^job_id $i/allJobs.txt | wc -l) || nJobs=0
            records="$records${RED}$(printf "%-2s\n" $count)${NC})$(printf "%-50s %-15s\n" " folder: $i" "$nJobs jobs submitted")\n"
            count=$((count + 1))

        elif [ -f "$i" ]; then 
            nJobs=$(grep "^Submitted batch job" $i | wc -l)
            
            records="$records${GREEN}$(printf "%-2s\n" $count)${NC})$(printf "%-50s %-15s\n" " file:   $i" "$nJobs jobs submitted")\n"
            count=$((count + 1))    
        fi    
    done
}

loadData

while true; do
    echo Path: $PWD
    echo Availale logFolders or files:
    if [ ! -z "$all" ]; then 
        echo  -e "$records" #| grep -v " 0 jobs submitted"
    else 
        echo  -e "$records"
    fi 
    
    if [ $count -eq 2 ] && [ -z "$x" ]; then
        
        echo Only one logFolder. No need to select.
        x=1 
        #firstRound=y
        #x=1
    else
        #if [ -z "$all" ]; then 
        #    echo -e "Please select the logFolder you want to check or type ${RED}q${NC} to quit:"
        #else 
            echo -e "Please select the logFolder you want to check or type ${RED}q${NC} to quit, or type ${BLUE}r${NC} to reload and ${GREEN}h${NC} to show/hide no job logs:"
        #fi 
        read -p "" x </dev/tty
        
        [[ "$x" == q ]] && break
        
        [[ "$x" == r ]] && loadData && continue

        if [[ "$x" == h ]]; then 
            [[ "$all" = y ]] && all="" || all=y 
            continue
        fi     
    
        [[ "$x" =~ ^[0-9]+$ && "$x" -lt $count && "$x" -ne 0 ]] || { echo -e "${RED}Out of range. Should be between > 0 and < $count"; continue; }
    fi
    
    logFolder=`echo $logFolders | cut -d' ' -f$x`

    [ -f "$logFolder" ] && less $logFolder && continue

    lines=`grep -v ^job_id $logFolder/allJobs.txt | awk 'NF>2{print $1, $2, $3}'`

    current=0; succ=0; fail=0; running=0; pending=0; requeue=0; unknown=0
    toShow="Summery for jobs in allJobs.txt:"
    for line in $lines; do
        if [ ! -z "${line/ /}" ]; then
            id=${line%% *}; name=${line##* }

            if [ -f $logFolder/$name.success ]; then
                toShow="$toShow\n${NC}Done $line"
                succ=$((succ + 1))
            elif [ -f $logFolder/$name.failed ]; then
                toShow="$toShow\n${RED}Fail${NC} $line"
                fail=$((fail + 1))
            elif [[ "$activeJobs" == *$id-R* ]]; then # && [[ "$id" != "$SLURM_JOBID" ]]; then
                toShow="$toShow\n${GREEN}Runn${NC} $line"
                running=$((running + 1))
            elif [[ "$activeJobs" == *$id-P* ]]; then # && [[ "$id" != "$SLURM_JOBID" ]]; then
                toShow="$toShow\n${RED}Pend${NC} $line"
                pending=$((pending + 1))
            elif [ -f $logFolder/$name.failed.requeued.1.time ]; then 
                toShow="$toShow\n${RED}Requ${NC} $line"
                requeue=$((requeue + 1))    
            else
                toShow="$toShow\n${RED}Unkn${NC} $line"
                unknown=$((unknown + 1))
            fi
        fi
    done

    while true; do
        echo Available logs:
        count1=1
        IFS=$'\n'
        #set -x 
        for i in `echo -e "$toShow" | tail -n +2`; do
            echo -e "$GREEN$count1 ${i#*\/}"
            count1=$((count1 + 1))
        done
        echo Currently working folder: $logFolder and job: $failedJob
        if [ $count1 -eq 2 ] && [ -z "$xx" ]; then
            echo Only one failed step. No need to select.
            xx=1
        else  #Or ${RED}r${NC} to run the job command. 
            
            [ ! -z "$xx" ] && echo -en "Type ${RED}s${NC} to see the slurm script for last .out log.
Or ${RED}l${NC} to list all log file related to this job. Or "
            echo -e "Select a failed step to check the .out log, ${RED}w${NC} for workflow chart or type ${RED}q${NC} to quit:"
            read -p "" xx </dev/tty;
        
            [[ "$xx" == s ]] && less $logFolder/$failedJob.sh && continue

            # if [[ "$xx" == r ]]; then 
            #     #set -x 
            #     echo -e "${RED}Command to re-run the job interactively:"
            #     echo 
            #     jobStep=${failedJob##*/}
            #     jobStep=${jobStep%%.*}
            #     file=`ls -lrt $logFolder/slurm*.run.sh`
            #     txt=`cat ${file##* }`
            #     txt=${txt%%\#@$jobStep*}
            #     echo -e "$txt" | grep "module load \|export PATH" 
                 
            #     txt=`grep pipefail $logFolder/$failedJob.sh`
            #     txt=${txt#*-c \'}
            #     txt=${txt%\' && touch*}
            #     echo $txt | less 
            #     #set +x 
            #     continue
            # fi 
            [[ "$xx" == q ]] && break
            
            [[ "$xx" == l ]] && ls -l $logFolder/$failedJob* | less 
            
            if [[ "$xx" == w ]]; then 

                if [ -f "$logFolder/dag.svg" ]; then 
                    cache_mtime=$(stat -c %Y "$logFolder/dag.svg")
                    current_time=$(date +%s)
                    if [ $((current_time - cache_mtime)) -gt 600 ]; then
                        rm $logFolder/dag.svg
                    fi 
                fi 
                #rm $logFolder/dag.svg
                if [ ! -f $logFolder/dag.svg ]; then 
                    #set -x 
                    module load miniconda3/23.1.0
                    source activate smartSlurmEnv
                    workflowPlot.py $logFolder &&  dot -Tsvg $logFolder/jobs.dot -o $logFolder/dag.svg
                fi 
                display $logFolder/dag.svg 
            fi

            [[ "$xx" =~ ^[0-9]+$ && "$xx" -lt $count1 && "$xx" -ne 0 ]] || { echo -e "${RED}Out of range. Should be > 0 and < $count1";  continue; }


        fi
        
        failedJob=`echo -e "$toShow" | tail -n +2 | head -n $xx | tail -n1 | awk '{print $NF}'`
        
        less $logFolder/$failedJob.out

        #set +x 
    done
done
