#!/bin/sh

## notes: to estimate resource, need at least three jobs if no input size is given, and 5 jobs if there is input size given

## features for regular sbatch (when calling without -L)
# Auto adjust partition according to run-time request if they does not match up
# Auto check if slurm script exists
# Auto create output and erro folders if not exist
# Auto adjust memory and run time based on earlier mem time usage
# Support re-run checking (using output as checkpoint)
# Auto adjust memory and run time based on earlier mem time usage
# Auto requeue job with double time when out of time
# Auto requeue job with double memory when out of memory
# Keep good log and send informative email
# allow user level config file in ~/.smartSlurm/config/config.txt

# Limitations:
# does not take logs in logDir, does not take care of re-run because there is not unique flag for the job, does not take care of downstream jobs

# todo:
# Forjob with breaking-point. Need more work to adjust how job record the run time and memory to jobRecords.txt.

# the logic:
# If job does not depends on other job, and has input, estimate mem/timed and submit
# If a job has no inputs, directly submit
# Adjust mem/time from upstream job for jobs with input. todo list: adjust jobs without input as well?

#set -e
#set -x
#set -u

echoerr() { echo "$@" >&2; }

usage() { echoerr -e "Short Usage: \n${0##*/} [-S software] [-R reference] [-F uniqueJobFlag (for smartPieline)s] [-I inputList] [-D Dependencies (for smartPipeline)] [sbatch options] [run]\nDetail Detail Usage:\n${0##*/} [-L logDir, optional. Such as: ./], [-S software, optional. Such as: bowtie2-4core. If empty, use script name as software name] [-R reference, optional. Such as: hg19] [-F uniqueJobFlag, optional. Such as 1.bowtie.s1.fa] [-I inputFileOrFolderList, optional. Such as: read1.fq,read2.fq] [ -D dependent jobs] <regular sbatch options, optional. Such as: job.sh or -p short -c 1 -t 2:0:0 --mem 2G --wrap \"my_application para1 para2\"> [run, optional: run will submit job, empty will do a dry run without submitting a job.]"; exit 1; }

[ -z "$1" ] && usage

[[ "-h" == "$1" ]] && usage

[[ "--help" == "$1" ]] && usage

if [ -z "$smartSlurmJobRecordDir" ]; then
    if [ -f ~/.smartSlurm/config/config.txt ]; then
        source ~/.smartSlurm/config/config.txt
    else
        source $(dirname $0)/../config/config.txt || { echoerr Config list file not found: config.txt; exit 1; }
    fi
fi

mkdir -p $smartSlurmJobRecordDir/stats

[ -f  $smartSlurmJobRecordDir/jobRecord.txt ] || echo 1jobID,2inputSize,3memDefault,4timeDefaut,5memAllocated,6timeAllocated,7memUsed,8timeUsed,9JobStatus,10useID,11saccMem,12software,13reference,14flag,15core,16extraMem,17extraTime,18date > $smartSlurmJobRecordDir/jobRecord.txt

echoerr Running: $0 $@
echoerr pwd: `pwd`

cmd="ssbatch"
whitespace="[[:space:]]"
for i in "$@"; do
    if [[ $i =~ $whitespace ]]; then
        i="\"$i\""
    fi
    cmd="$cmd  $i"
done
echoerr $cmd

testRun=${@: -1}

unset SSBATCH_S SSBATCH_R SSBATCH_I SSBATCH_D SSBATCH_C

echoerr
array=( "$@" )

export alwaysRequeueIfFail=""
caller=`ps -f $PPID` && [[ "$caller" == *slurmPipeLine* ]] && runningSingleJob="" || runningSingleJob=y

[ ! -z "$runningSingleJob" ] && set -- "$@" run && testRun=run

logDir=$smartSlurmLogDir

slurmScriptPosition=$(($(($#))-2))

# get the first few parameters for ssbatch
for (( i=0; i<$(($#)); i++ )); do
    [ -z "${array[$i]}" ] && continue
  	#echoerr $i " / " $(($#)) " : " ${array[$i]}
  	case "${array[$i]}" in
        --comment=*     )   comment="${array[$i]}" && arr=(${comment/--comment=/}) && for c in "${arr[@]}"; do eval $c; done;;
  		"-S" 			)   software="${array[$i+1]}" && array[$i+1]="";;
  		--Software=* 	)   software="${array[$i]}" && software="${software/--Software=/}";;
  		"-R" 			)   ref="${array[$i+1]}" && array[$i+1]="";;
  		--Ref=* 		)   ref="${array[$i]}" && ref="${ref/--Ref=/}";;
  		"-F" 			)   flag="${array[$i+1]}" && array[$i+1]="";;
  		--Flag=* 	    )   flag="${array[$i]}" && flag="${flag/--Flag=/}";;
        "-I" 			)   inputs="${array[$i+1]}" && array[$i+1]="";;
  		--Inputs=* 	    )   inputs="${array[$i]}" && inputs="${inputs/--Inputs=/}";;
        "-D"            )   deps="${array[$i+1]}" && array[$i+1]="";;
        "--Dependency=" )   deps="${array[$i]}" && deps="${deps/--Dependency=/}";;
        "--alwaysRequeueIfFail") export alwaysRequeueIfFail=true;;
  	    "-p"            )   partition="${array[$i+1]}" && array[$i+1]="";; # will set partition later
  		--partition=*   )   partition="${array[$i]}" && partition=${partition/--partition=/};;
  		--mem-per-cpu=* ) 	mem1="${array[$i]}" && mem1="${mem1/--mem-per-cpu=/}";;
  		"-c" 	 		) 	core="${array[$i+1]}" && array[$i+1]="";;
  		--cpus-per-task=*)  core="${array[$i]}" && core="${core/--cpus-per-task=/}";;
  		"-n" 	 		) 	task="${array[$i+1]}" && array[$i+1]="";;
  		--ntasks=*      )   task="${array[$i]}" && task="${task/--ntasks=/}";;
  		"-N" 	 		) 	node="${array[$i+1]}" && array[$i+1]="";;
  		--nodes=*       )   node="${array[$i]}" && node="${node/--nodes=/}";;
  		"--mem"  		) 	mem="${array[$i+1]}" && array[$i+1]="";; # will set memory later
  		--mem=* 		)  	[ -z "$mem" ] && mem="${array[$i]}" && mem=${mem/--mem=/};;
  		"-t" 			)   time="${array[$i+1]}" && array[$i+1]="";;
  		--time=* 		)   time="${array[$i]}" && time="${time/--time=/}";;
  		"-J" 			)   name="${array[$i+1]}" && array[$i+1]="";;
  		--job-name=* 	)   name="${array[$i]}" && name="${time/--job-name=/}";;
  		"-o" 			)   out="${array[$i+1]}" && array[$i+1]="";;
  		--output=* 		)   out="${array[$i]}" && out="${out/--oupput=/}";;
  		"-e" 			)   err="${array[$i+1]}" && array[$i+1]="";;
  		--error=* 		)   err="${array[$i]}" && err="${err/--error=/}";;
        "-A"            )   slurmAcc="-A ${array[$i+1]}" && array[$i+1]="";;
        "-d" 			)   deps="${array[$i+1]}" && array[$i+1]="";;
  	    --dependency=* 	)   deps="${array[$i]}" && deps="${deps/--dependency=/}";;
        "test"          )   [ $i -eq $(($#)) ] && continue;;
        "run"           )   [ $i -eq $(($#)) ] && continue;;
        "--wrap"        )   echoerr Found --wrap ${array[$i+1]} && wrapCMD="${array[$i+1]}" && array[$i+1]="";;
        --wrap=*        )   echoerr Found --wrap= && wrapCMD="${array[$i]}" && wrapCMD="${wrapCMD/--wrap=}";;
        *               )   { [ ! -z "$slurmScript$wrapCMD" ] && echoerr find additional parameter for sbatch ${array[$i]} && additionalPara="$additionalPara ${array[$i]}"; [ -z "$slurmScript" ] && [ -f "${array[$i]}" ] && [[ " -a -A -b -c -d -D -e  -i -J -L -M -m -n -N -o -p -q -S -t -F -w -x -B -G --nice --export " != *" ${array[$i-1]} "* ]] && echoerr Found slurmScript ${array[$i]} && slurmScript="${array[$i]}"; };;

        # options with value
        # -a -A -b -c -d -D -e  -i -J -L -M -m -n -N -o -p -q -S -t -F -w -x -B -G --nice --export 
    esac
done

echoerr
echoerr Parsing result from sbatch commandline:
echoerr software: $software ref: $ref jobFlag: $flag inputs: $inputs deps: $deps
echoerr partition: $partition time: $time mem: $mem mem-per-cpu: $mem1 task: $task core: $core node: $node out: $out err: $err additionalPara: $additionalPara

depsO=$deps

if [ -z "$slurmScript" ]; then
    echoerr wrapCMD: $wrapCMD
else
    echoerr slurmScript: $slurmScript
    echoerr additionalPara: $additionalPara
fi
#echoerr test or run: $testRun
echoerr

if [ ! -z "$slurmScript" ]; then
  echoerr Validating slurmScript:
  firstRow=`head -n 1 $slurmScript`
  echoerr FirstRow of the script: $firstRow
  [[ "$firstRow" =~ ^#\!/bin/bash ]] || [[ "$firstRow" =~ ^#\!/usr/bin/bash ]] || [[ "$firstRow" =~ ^#\!/bin/sh ]] || [[ "$firstRow" =~ ^#\!/usr/bin/sh ]]|| { echoerr "Error: first row of the slurm script ($slurmScript) does not start with #!/bin/bash, #!/usr/bin/bash, #!/bin/sh, #!/usr/bin/sh";  exit 1;}
fi

[ -z "$wrapCMD" ] && [ -z "$slurmScript" ] && echoerr Error: Did not find --wrap, did not find slurmScript either. && exit 1

if [[ ! -z "$slurmScript" ]]; then
    echoerr
    echoerr Parsing slurm script ...
    while IFS=$'\n' read line; do
        echoerr Got line: $line
        arr=($line)
        if [[ ${arr[0]} == "#SBATCH" ]]; then
            case "${arr[1]}" in
                --comment=*    )   echoerr found --comment && comment="${arr[1]}" && ar=(${comment/--comment=/}) && for c in "${ar[@]}"; do v=${c%=*}; [ -z "${!v}" ] && eval $c; done;;

                "-A"   )   echoerr Found -A  && [ -z "$slurmAcc" ] && slurmAcc="-A ${arr[2]}";;
                "--mem" ) [ -z "$mem" ] && echoerr Found --mem && mem="${arr[2]}";;
                --mem=* ) [ -z "$mem" ] && echoerr Found --mem= && mem="${arr[1]}" && mem="${mem/--mem=/}";;
                "--mem-per-cpu") [ -z "$mem1" ] && echoerr Found --mem-per-cpu && mem1="${arr[2]}";;
                --mem-per-cpu=*) [ -z "$mem1" ] && echoerr Found --mem-per-cpu= && mem1="${arr[1]}" && mem1="${mem1/--mem-per-cpu=/}";;
                "-c"    ) [ -z "$core" ] && echoerr Found -c && core="${arr[2]}";;
                --cpus-per-task=* ) [ -z "$core" ] && echoerr Found --cpus-per-task= && core="${arr[1]}" && core="${core/--cpus-per-task=/}";;
                "-n"    ) [ -z "$task" ] && echoerr Found -n && task="${arr[2]}";;
                --ntasks=* ) [ -z "$task" ] && echoerr Found --ntasks= && task="${arr[1]}" && task="${task/--ntasks=/}";;
                "-N"    ) [ -z "$node" ] && echoerr Found -N && node="${arr[2]}";;
                --nodes=*   ) [ -z "$node" ] && echoerr Found --nodes= && node="${arr[1]}" && node="${node/--nodes=/}";;
                "-t"    ) [ -z "$time" ] && echoerr Found -t && time="${arr[2]}";;
                --time=* ) [ -z "$time" ] && echoerr Found --time= && time="${arr[1]}" && time="${time/--time=/}";;
                "-J"    ) [ -z "$name" ] && echoerr Found -t && name="${arr[2]}";;
                --job-name=* ) [ -z "$name" ] && echoerr Found --job-name= && name="${arr[1]}" && name="${time/--job-name=/}";;
                "-o"    ) [ -z "$out" ] && echoerr Found -o && out="${arr[2]}";;
                --output=* ) [ -z "$out" ] && echoerr Found --output= && out="${arr[1]}" && out="${out/--output=/}";;
                "-e" ) [ -z "$err" ] && echoerr Found -e && err="${arr[2]}";;
                --error=* ) [ -z "$err" ] && echoerr Found --error= && err="${arr[1]}" && err="${err/--error=/}";;

                "-d"    ) [ -z "$deps" ] && echoerr Found -d && deps="${arr[2]}";;
                --dependency=* ) [ -z "$deps" ] && echoerr Found --dependency= && deps="${arr[1]}" && deps="${deps/--dependency=/}";;
            esac
        fi
    done < $slurmScript


    


    echoerr
    echoerr Parsing result from slurm script:
    echoerr time: $time mem: $mem mem-per-cpu: $mem1 task: $task core: $core node: $node out: $out err: $err deps: $deps

    echoerr slurmScript: $slurmScript
    echoerr additionalPara: $additionalPara
fi

[ -z "$core" ] && { [ ! -z "$task" ] && core="$task" || core=1; }

[ -z "$software" ] && [ ! -z "$SSBATCH_S" ] && software="$SSBATCH_S"
[ -z "$ref" ] && [ ! -z "$SSBATCH_R" ] && ref="$SSBATCH_R"
[ -z "$input" ] && [ ! -z "$SSBATCH_I" ] && inputs="$SSBATCH_I"
[ -z "$deps" ] && [ ! -z "$SSBATCH_D" ] && deps="$SSBATCH_D"
[[ "$software" == *Checkpoint ]] || software=$software$SSBATCH_C
[ -z "$out" ] || out=`realpath $out`
[ -z "$err" ] || err=`realpath $err`
#todo: err is ignored. will work on it later


# this is not pipeline
if [ ! -z "$runningSingleJob" ]; then
    mkdir -p $smartSlurmLogDir/
    #[ -z "$software" ] && software=regularSbatch
    tm=`mktemp XXXXXXXX --dry-run`
    if [ -z "$software" ]; then
        # todo: figure out how to find software name and input automatically
        #echoerr Need software name to work
        #usage  # need software name to work

        if [ ! -z "$wrapCMD" ]; then
            arr=($wrapCMD)
            # need remove the parameters, to get unique name for job types
            if [[ "${arr[0]}" == sh || "${arr[0]}" == bash || "${arr[0]}" == python || ""${arr[0]}" == python3  || "${arr[0]}" == matlab || ""${arr[0]}" == Rscript ]]; then
                software="${arr[1]}"
            else
                software="${arr[0]}"
            fi
            software=${software##*/}
            flag=${wrapCMD// /}; flag=${flag%;}
        else
            software=${slurmScript##*/}
            #[ -z "$flag" ] &&
            flag=$software.${additionalPara// /}
            flag=${flag%.}
        fi
    fi
    [ -z "$name" ] || flag=$name
else
    [ -d "$smartSlurmLogDir/" ] || { echoerr Directory not exist: $smartSlurmLogDir/; usage; }

    flag=${flag//\//-}
fi


mkdir -p $smartSlurmLogDir/
job=$smartSlurmLogDir/$flag.sh
succFlag=$smartSlurmLogDir/$flag.success
failFlag=$smartSlurmLogDir/$flag.failed
#startFlag=$smartSlurmLogDir/$flag.start
killFlag=$smartSlurmLogDir/$flag.user.killed
outFlag=$smartSlurmLogDir/$flag.out
errFlag=$smartSlurmLogDir/$flag.err

deps=${deps#.}

[ -z "$ref" ] && ref=none
[ -z "$inputs" ] && inputs=none
[ -z "$deps" ] && deps=null

if [ -z "$mem" ]; then
    if [ -z "$mem1" ]; then
        mem=$defaultMem
    else
        [[ "$mem1" == *G ]] && mem=$(( ${mem1%G} * $core * 1024)) || mem=$(( ${mem1%M} * $core ))
    fi
else
    [[ "$mem" == *G ]] && mem=$(( ${mem%G} * 1024 )) || mem=${mem%M}
fi

if [ -z "$time" ]; then
    min=$defaultTime
else
    [[ "$time" == *-* ]] && { day=${time%-*}; tem=${time#*-}; hour=${tem%%:*}; min=${tem#*:}; min=${min%%:*}; sec=${tem#$hour:$min}; sec=${sec#:}; } || { [[ "$time" =~ ^[0-9]+$ ]] && min=$time || { sec=${time##*:}; min=${time%:*}; min=${min##*:}; hour=${time%$min:$sec}; hour=${hour%:}; day=0;} }

    [ -z "$day" ] && day=0; [ -z "$hour" ] && hour=0; [ -z "$min" ] && min=0;[ -z "$sec" ] && sec=0

    min=$(($day * 24 * 60 + $hour * 60  + $min))
fi

if [[ $deps == "null" ]]; then
    deps=""
    resAjust="#Depend on no job\n"

elif [[ $deps == ${deps/\./} ]]; then
    resAjust="#Depend on single job\n"
    deps="--dependency=afterok:${deps/\./}"
else
    resAjust="#Depend on multiple jobs\n"
    tmp=""
    for t in ${deps//\./ }; do
        #echoerr working on $t  test
        tmp="$tmp:$t"
    done
    [ ! -z "$tmp" ] && deps="--dependency=afterok$tmp"
fi

resAjust="#Original mem $mem M, Original time: $min mins\n"

# check job done before or not
if [[ "$testRun" == "run" ]]; then
    if [ -f $succFlag ]; then
        stepID=${flag%%.*}
        if ([ -f $smartSlurmLogDir/skipAllSuccessJobs.txt ] || [ -f $smartSlurmLogDir/skipAllSuccessJobs$stepID.txt ]) && [ -z "$deps" ]; then
            echo skipThisJob
            exit
        elif [ ! -f $smartSlurmLogDir/reRunAllSuccessJobs.txt ] && [ ! -f $smartSlurmLogDir/reRunAllSuccessJobs$stepID.txt ] && [ -z "$deps" ]; then
            stepName=${flag#*.}; stepName=${stepName#*.}; stepName=${stepName%%.*}
            echoerr $flag was done before, do you want to re-run it?
            echoerr -e "y:        To re-run this job, press y, then enter key."
            echoerr -e "ystep:    To re-run all jobs for step $stepID: $stepName, type ystep, then press enter key."
            echoerr -e "yall:     To re-run all jobs, type yall, then press enter key."
            echoerr -e "enter:    To not re-run this job, directly press enter key."
            echoerr -e "nstep:    To not re-run all successful jobs for step $stepID: $stepName, type nstep, then press enter key."
            echoerr -e "nall:     To not re-run all successful jobs, type nall, then press enter key."
            read -p "" x </dev/tty

            echoerr You typed: \"$x\"

            if [[ "$x" == "y" ]]; then
                echoerr "Will re-run the down stream steps even if they are done before (because they have deps - see code in row 70)."
            elif [[ "$x" == "ystep" ]]; then
                touch $smartSlurmLogDir/reRunAllSuccessJobs$stepID.txt
            elif [[ "$x" == "nstep" ]]; then
                touch $smartSlurmLogDir/skipAllSuccessJobs$stepID.txt
                echo skipThisJob
                exit
            elif [[ "$x" == "yall" ]]; then
                touch $smartSlurmLogDir/reRunAllSuccessJobs.txt
            elif [[ "$x" == "nall" ]]; then
                touch $smartSlurmLogDir/skipAllSuccessJobs.txt
                echo skipThisJob
                exit
            else
                echo skipThisJob
                exit
            fi
        fi
        #echoerr
        #rm $succFlag
        #ls -l $smartSlurmLogDir/ 1>&2
    fi

    if [ -f $smartSlurmLogDir/keepRunningJobs.txt ]; then


        #echoerr $flag
        # check the third column for the job name, then find the the job id in column 1
        out=`cat $smartSlurmLogDir/allJobs.txt | awk '{if ($3 ~ /'"$flag/"') print $1, $2;}' | tail -n 1`
        id=${out%% *}; de=${out##* }

        # this job was submitted earlier
        if [ ! -z "$id" ]; then

            # this job still running or pending
            # todo: need troubleshoot this part. If dependency condition changed, need resubmit the job
            if grep ^$id $smartSlurmLogDir/keepRunningJobs.txt 1>/dev/null; then

                # check if upsteam job is resubmitted
                upstreamResubmitted=""
                if [[ $de != null ]]; then
                    if [[ $de == ${de/\./} ]]; then
                        [ -f $smartSlurmLogDir/${de/\./}.resubmitted ] && upstreamResubmitted=y
                    else
                        for t in ${de//\./ }; do
                            [ -f $smartSlurmLogDir/$t.resubmitted ] && upstreamResubmitted=y
                        done
                    fi
                fi

                # the job still running, but the dependency contidtion is change, need cancel it.
                if [ ! -z "$upstreamResubmitted" ] || [[ "$de" != "$depsO" ]]; then
                    echoerr "Running job job is cancelled: $id" && scancel $id
                else

                    echoerr thisJobStillRunning $id here
                    echo $id
                    exit
                fi
            else
                if [[ $depsO == null ]]; then
                    depsR="" #dependency=\"\""
                    #resAjust="#Depend on

                elif [[ $depsO == ${depsO/\./} ]]; then
                    #resAjust="#Depend on single job\n"
                    depsR="dependency=afterok:${depsO/\./}"
                else
                    #resAjust="#Depend on multiple jobs\n"
                    tmp=""
                    for t in ${depsO//\./ }; do
                        #echoerr working on $t  test
                        tmp="$tmp:$t"
                    done
                    [ ! -z "$tmp" ] && depsR="dependency=afterok$tmp"
                fi

                scontrol requeue $id

                touch $smartSlurmLogDir/$id.resubmitted

                [ ! -z "$depsR" ] && scontrol update job=$id  $depsR && scontrol hold $id
                echo "Resubmit#$id-#$de-#$flag" >> $smartSlurmLogDir/allJobs.txt
                echo $id
                #rm $smartSlurmLogDir/$flag.success 2>/dev/null
                rm -r $smartSlurmLogDir/$flag $smartSlurmLogDir/$flag.* 2>/dev/null || : # in case user has set -e and file not exist,  we will not exit
                exit
            fi
        fi
        #set +x
    fi
    #ls $flagDir/$flag.* 1>&2
    rm -r $smartSlurmLogDir/$flag $smartSlurmLogDir/$flag.* 2>/dev/null || : # in case user has set -e and file not exist,  we will not exit
fi

#[ -f $smartSlurmJobRecordDir/stats/extraMem.$software.$ref ] && maxExtra=`sort -n $smartSlurmJobRecordDir/stats/extraMem.$software.$ref | tail -n1 | cut -d' ' -f1` && oomCount=`wc -l $smartSlurmJobRecordDir/stats/extraMem.$software.$ref | cut -d' ' -f1` && extraMem=$(( $maxExtra * $oomCount ))

[ -f $smartSlurmJobRecordDir/stats/extraMem.$software.$ref ] && maxExtra=`sort -n $smartSlurmJobRecordDir/stats/extraMem.$software.$ref | tail -n1 | cut -d' ' -f1` && extraMem=$(( $maxExtra * 2 )) || extraMem=$(($defaultExtraMem * 2))

 #extraMem=`sort $smartSlurmJobRecordDir/stats/extraMem.$software.$ref | tail -n1`

# original mem and time
memO=$mem; minO=$min
inputSize=0

echoerr
echoerr Check if there input file list and this job does not depend on other jobs

# has checkpoint ready to resume from
if [ -z "$deps" ] && [[ "$software" == *.Checkpoint ]] && ls $smartSlurmLogDir/$flag/ckpt_*.dmtcp >/dev/null 2>&1 && [ -f $smartSlurmLogDir/$flag.adjust ]; then
    tText=`cat $smartSlurmLogDir/$flag.adjust`
    mem=`echo $tText | cut -d' ' -f1`
    min=`echo $tText | cut -d' ' -f2`
    extraMem=`echo $tText | cut -d' ' -f3`
    echo Got mem/time from $smartSlurmLogDir/$flag.adjust: > $outFlag
    echo $tText >> $outFlag
else
    rm -r $smartSlurmLogDir/$flag $smartSlurmLogDir/$flag.* 2>/dev/null || :

    # do not have input file list    #todo: we can try to figure out the input from the software parameters here
    if [[ "$inputs" == "none" ]]; then
        echoerr No inputs
        resAjust="$resAjust#This job does not have input.\n"
        ref=${ref//\//-}

        rows=`( wc -l $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat.noInput 2>/dev/null || echo 0 ) | awk '{print $1}'`
        #echoerr rows  $rows
        # empty or more than 60 minutes but less than 4 records
        if test `find $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat.noInput -mmin +20 2>/dev/null` && [ $rows -lt 200 ] || [ $rows -eq 0 ]; then
            mkdir -p $smartSlurmJobRecordDir/stats/
            #cat /home/*/smartSlurm/stats/myJobRecord.txt > $smartSlurmJobRecordDir/jobRecord.txt
            #test `find $smartSlurmJobRecordDir/jobRecord.txt -mmin +20` && echoerr jobRecord.txt synced within 21 hour. No need to re-sync || cat $HOME/smartSlurm/myJobRecord.txt > $smartSlurmJobRecordDir/jobRecord.txt

            # todo: could use single file here
            grep COMPLETED $smartSlurmJobRecordDir/jobRecord.txt 2>/dev/null | awk -F, -v a=$software -v b=$ref '{ if($12 == a && $13 == b) {print $7 }}' | uniq > $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat.noInput

            grep COMPLETED $smartSlurmJobRecordDir/jobRecord.txt 2>/dev/null | awk -F, -v a=$software -v b=$ref '{ if($12 == a && $13 == b) {print $8 }}' | uniq > $smartSlurmJobRecordDir/stats/$software.$ref.time.stat.noInput

            if [ -s $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat.noInput ] && [ -s $smartSlurmJobRecordDir/stats/$software.$ref.time.stat.noInput ]; then

                #OUT="$(mktemp -d)"
                paste $smartSlurmJobRecordDir/stats/$software.$ref.time.stat.noInput $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat.noInput | column -s $'\t' -t | sed '$ d' > $smartSlurmJobRecordDir/stats/$software.$ref.timeMem.noInput.txt

                #cp $smartSlurmJobRecordDir/stats/$software.$ref.timeMem.noInput.txt $OUT/timeMem.txt
                #cd $OUT
                # make plot and calculate statistics
                gnuplot -e 'set key outside; set key reverse; set key invert; set term png; set output "'"$smartSlurmJobRecordDir/stats/$software.$ref.stat.noInput.png"'"; set title "Time vs. Memory Usage"; set xlabel "Time(Min)"; set ylabel "Memory(M)"; f(x)=a*x+b; fit f(x) "'"$smartSlurmJobRecordDir/stats/$software.$ref.timeMem.noInput.txt"'" u 1:2 via a, b; t(a,b)=sprintf("f(x) = %.2fx + %.2f", a, b); plot "'"$smartSlurmJobRecordDir/stats/$software.$ref.timeMem.noInput.txt"'" u 1:2,f(x) t t(a,b); print "Finala=", a; print "Finalb=",b; stats "'"$smartSlurmJobRecordDir/stats/$software.$ref.timeMem.noInput.txt"'" u 1 ' 2>&1 | grep 'Final\| M' | awk 'NF<5{print $1, $2}' | sed 's/:/=/' | sed 's/ //g' > $smartSlurmJobRecordDir/stats/$software.$ref.timeMem.stat.noInput.txt

                # cd -
                # convert $OUT/timeMem.pdf -background White -flatten $smartSlurmJobRecordDir/stats/$software.$ref.stat.noInput.pdf 2>/dev/null
                # pdftoppm $smartSlurmJobRecordDir/stats/$software.$ref.stat.noInput.pdf  -png > $smartSlurmJobRecordDir/stats/$software.$ref.stat.noInput.png 2>/dev/null

                rows=`{ wc -l $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat.noInput 2>/dev/null || echo 0; } | cut -f 1 -d " "`

                #rm -r $OUT 2>/dev/null
            fi
        fi

        # at least 3 records
        if [ $rows -gt 3 ]; then
            cutoffRow=$(( ($row - 1)  / 10  + 1)) # top 10

            mem=`cat $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat.noInput | sort -nr | tr '\n' ' ' | cut -f $cutoffRow -d " "`
            mem=$((${mem/\.*/} + extraMem))
            # mem=${txt[$cutoffRow]}; mem=$((${mem/\.*/} + extraMem))M

            min=`cat $smartSlurmJobRecordDir/stats/$software.$ref.time.stat.noInput | sort -nr | tr '\n' ' ' | cut -f $cutoffRow -d " "`
            min=$((${min/\.*/} + defaultExtraTime))

            resAjust="$resAjust#Got estimation based on software.reference: $software.$ref.\n"
            resAjust="$resAjust#Give ${extraMem} M extra memory and $defaultExtraTime more minutes. \n#So use this to submit the job: $mem M  ${min} min"

        else
            resAjust="$resAjust#There are less than 3 job records. Use default mem and time."
        fi


    # not depends on other job, and there is input file list
    elif [ -z "$deps" ]; then
        echoerr Does not depend on other jobs and have inputs.
        inputSize=`{ du --apparent-size -c -L ${inputs//,/ } 2>/dev/null || echo notExist; } | tail -n 1 | cut -f 1`

        if [[ "$inputSize" == "notExist" ]]; then
            resAjust="$resAjust#Some or all input files not exist: $inputs\n"
            echoerr Error! missingInputFile: ${inputs//,/ }
            [[ "$testRun" == "run" ]] && exit
        else
            #inputSize=$(($inputSize/1024)); # convert to M
            resAjust="$resAjust#InputSize: $inputSize\n"

            #rm ~/.rcbio/$software.$ref.mem.stat # for testing

            if [ -f $smartSlurmJobRecordDir/stats/$software.${ref//\//-}.mem.stat ]; then
                output=`estimateMemTime.sh $software ${ref//\//-} $inputSize`
                resAjust="$resAjust\n`cat $smartSlurmJobRecordDir/stats/$software.${ref//\//-}.mem.stat`\n"
                resAjust="$resAjust\n#Output from estimateMemTime.sh: $output \n"
                #resAjust="$resAjust#Output from estimateMemTime.sh: $output \n"
                if [[ "$output" == "outOfRange" ]]; then
                    resAjust="$resAjust#Input size is too big for the curve to estimate! Use default mem and runtime to submit job.\n"
                    # not deleting mem.stat, so other jobs will not re-build it within 60 minutes
                elif [ ! -z "$output" ]; then
                    output=${output% *}
                    [[ ${output% *} != 0 ]] && mem=$((${output% *}+extraMem)) && resAjust="$resAjust\n#Give ${extraMem} M extra memory. "
                    [[ ${output#* } != 0 ]] && min=$((${output#* }+defaultExtraTime)) && resAjust="$resAjust\n#Give $defaultExtraTime mins more time."
                    resAjust="$resAjust\n#So use this to submit the job: $mem M ${min} mins"
                fi

            fi

            if [[ "$output" == "outOfRange" ]] && test `find $smartSlurmJobRecordDir/stats/$software.${ref//\//-}.mem.stat -mmin +20` || [ ! -f $smartSlurmJobRecordDir/stats/$software.${ref//\//-}.mem.stat ]; then
                resAjust="$resAjust#Do not have a formula, or it is old and out of range. Let us build one...\n"

                #[ test `find $smartSlurmJobRecordDir/jobRecord.txt -mmin -20` ] && echoerr jobRecord.txt synced within 20 hour. No need to re-sync || cat $HOME/smartSlurm/myJobRecord.txt > $smartSlurmJobRecordDir/jobRecord.txt

                #jobStatistics.sh $software ${ref//\//-} 4 1>&2


                #filter by software and reference
                # todo: maybe able to replace / in ref at begaining of the script?
                ref=${ref//\//-}
                grep COMPLETED $smartSlurmJobRecordDir/jobRecord.txt 2>/dev/null | awk -F"," -v a=$software -v b=$ref '{ if($12 == a && $13 == b) {print $2, $7 }}' | sort -r  -k1,1 -k2,2 | sort -u -k1,1 > $smartSlurmJobRecordDir/stats/$software.$ref.mem.txt

                grep COMPLETED $smartSlurmJobRecordDir/jobRecord.txt 2>/dev/null | awk -F"," -v a=$software -v b=$ref '{ if($12 == a && $13 == b) {print $2, $8 }}' | sort -r  -k1,1 -k2,2 | sort -u -k1,1 > $smartSlurmJobRecordDir/stats/$software.$ref.time.txt

                echoerr "Got mem data from jobRecord.txt (content of $smartSlurmJobRecordDir/stats/$software.$ref.mem.txt):"
                cat $smartSlurmJobRecordDir/stats/$software.$ref.mem.txt >&2

                echoerr "Got time data from jobRecord.txt (content of $smartSlurmJobRecordDir/stats/$software.$ref.time.txt):"
                cat $smartSlurmJobRecordDir/stats/$software.$ref.time.txt >&2

                if [[ $(wc -l <$smartSlurmJobRecordDir/stats/$software.$ref.mem.txt) -lt 3 ]]; then
                    echoerr There are less than 3 records. No way to fit a curve. Exiting...
                    resAjust="$resAjust#There are less than 3 records. No way to fit a curve.\n"

                else



                    # make plot and calculate statistics
                    # gnuplot -e 'set term pdf; set output "mem.pdf"; set title "Input Size vs. Memory Usage" font "Helvetica Bold,18"; set xlabel "Input Size(K)"; set ylabel "Memory Usage(M)"; f(x)=a*x+b; fit f(x) "mem.txt" u 1:2 via a, b; t(a,b)=sprintf("f(x) = %.2fx + %.2f", a, b); plot "mem.txt" u 1:2,f(x) t t(a,b); print "Finala=", a; print "Finalb=",b; stats "mem.txt" u 1 ' 2>&1 | grep 'Final\| M' | awk 'NF<4{print $1, $2}' |sed 's/:/=/' | sed 's/ //g' > mem.stat.txt; echo STDFIT=`cat fit.log | grep FIT_STDFIT | tail -n 1 | awk '{print $8}'` >> mem.stat.txt
                    # echo RSquare="$(gnuplot -e 'stats "mem.txt" using 1:2;' 2>&1| grep Correlation | cut -d' ' -f7 | awk '{print $1 * $1 }')" >> mem.stat.txt

                    gnuplot -e 'set key outside; set key reverse; set key invert; set term png; set output "'"$smartSlurmJobRecordDir/stats/$software.$ref.mem.png"'"; set title "Input Size vs. Memory Usage"; set xlabel "Input Size(K)"; set ylabel "Memory Usage(M)"; f(x)=a*x+b; fit f(x) "'"$smartSlurmJobRecordDir/stats/$software.$ref.mem.txt"'" u 1:2 via a, b; t(a,b)=sprintf("f(x) = %.2fx + %.2f", a, b); plot "'"$smartSlurmJobRecordDir/stats/$software.$ref.mem.txt"'" u 1:2,f(x) t t(a,b); print "Finala=", a; print "Finalb=",b; stats "'"$smartSlurmJobRecordDir/stats/$software.$ref.mem.txt"'" u 1 ' 2>&1 | grep 'Final\| M' | awk 'NF<5{print $1, $2}' |sed 's/:/=/' | sed 's/ //g' > $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat ; echo STDFIT=`cat fit.log | grep FIT_STDFIT | tail -n 1 | awk '{print $8}'` >> $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat

                    echo RSquare="$(gnuplot -e 'stats "'"$smartSlurmJobRecordDir/stats/$software.$ref.mem.txt"'" using 1:2;' 2>&1| grep Correlation | cut -d' ' -f7 | awk '{print $1 * $1 }')" >> $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat
                  
                    echo SCount=$(wc -l $smartSlurmJobRecordDir/stats/$software.$ref.mem.txt | cut -d' ' -f1) >> $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat

                    sed -i 's/\x0//g' $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat

                    gnuplot -e 'set key outside; set key reverse; set key invert; set term png; set output "'"$smartSlurmJobRecordDir/stats/$software.$ref.time.png"'"; set title "Input Size vs. Time Usage"; set xlabel "Input Size(K)"; set ylabel "Time Usage(Min)"; f(x)=a*x+b; fit f(x) "'"$smartSlurmJobRecordDir/stats/$software.$ref.time.txt"'" u 1:2 via a, b; t(a,b)=sprintf("f(x) = %.2fx + %.2f", a, b); plot "'"$smartSlurmJobRecordDir/stats/$software.$ref.time.txt"'" u 1:2,f(x) t t(a,b); print "Finala=", a; print "Finalb=",b; stats "'"$smartSlurmJobRecordDir/stats/$software.$ref.time.txt"'" u 1 ' 2>&1 | grep 'Final\| M' | awk 'NF<5{print $1, $2}' |sed 's/:/=/' | sed 's/ //g' > $smartSlurmJobRecordDir/stats/$software.$ref.time.stat ; echo STDFIT=`cat fit.log | grep FIT_STDFIT | tail -n 1 | awk '{print $8}'` >> $smartSlurmJobRecordDir/stats/$software.$ref.time.stat

                    echo RSquare="$(gnuplot -e 'stats "'"$smartSlurmJobRecordDir/stats/$software.$ref.time.txt"'" using 1:2;' 2>&1| grep Correlation | cut -d' ' -f7 | awk '{print $1 * $1 }')" >> $smartSlurmJobRecordDir/stats/$software.$ref.time.stat

                    sed -i 's/\x0//g' $smartSlurmJobRecordDir/stats/$software.$ref.time.stat



                    # make plot and calculate statistics
                    # gnuplot -e 'set term pdf; set output "time.pdf"; set title "Input Size vs. Time Usage" font "Helvetica Bold,18"; set xlabel "Input Size(K)"; set ylabel "Time(Min)"; f(x)=a*x+b; fit f(x) "time.txt" u 1:2 via a, b; t(a,b)=sprintf("f(x) = %.2fx + %.2f", a, b); plot "time.txt" u 1:2,f(x) t t(a,b); print "Finala=", a; print "Finalb=",b; stats "time.txt" u 1 ' 2>&1 | grep 'Final\| M' | awk 'NF<4{print $1, $2}' |sed 's/:/=/' | sed 's/ //g' > time.stat.txt; echo STDFIT=`cat fit.log | grep FIT_STDFIT | tail -n 1 | awk '{print $8}'` >> time.stat.txt
                    # echo RSquare="$(gnuplot -e 'stats "time.txt" using -1:2;' 2>&1| grep Correlation | cut -d' ' -f7 | awk '{print $1 * $1 }')" >> time.stat.txt

                    echoerr There are more than 3 $software $ref jobs already run for this software, statics is ready for current job:
                    # echoerr Memeory statisics:
                    # echoerr "inputsize mem(M)"
                    # cat $smartSlurmJobRecordDir/stats/$software.$ref.mem.stat
                    # echoerr
                    # echoerr Time statistics:
                    # echoerr "inputsize time(minute)"
                    # cat $smartSlurmJobRecordDir/stats/$software.$ref.time.stat

                    # mv $OUT/mem.txt $smartSlurmJobRecordDir/stats/$software.$ref.mem.txt
                    # mv $OUT/time.txt $smartSlurmJobRecordDir/stats/$software.$ref.time.txt

                    # convert $OUT/mem.pdf -background White -flatten $smartSlurmJobRecordDir/stats/$software.$ref.mem.pdf
                    # convert $OUT/time.pdf -background White -flatten $smartSlurmJobRecordDir/stats/$software.$ref.time.pdf
                    # pdftoppm $smartSlurmJobRecordDir/stats/$software.$ref.mem.pdf  -png > $smartSlurmJobRecordDir/stats/$software.$ref.mem.png
                    # pdftoppm $smartSlurmJobRecordDir/stats/$software.$ref.time.pdf  -png > $smartSlurmJobRecordDir/stats/$software.$ref.time.png

                    echoerr
                    echoerr You can see the plot using commands:
                    echoerr display $smartSlurmJobRecordDir/stats/$software.$ref.mem.png
                    echoerr display $smartSlurmJobRecordDir/stats/$software.$ref.time.png

                    # cd -



                    #echoerr got files in $smartSlurmJobRecordDir/stats:
                    #ls -lrt $smartSlurmJobRecordDir/stats
                    if [ -f $smartSlurmJobRecordDir/stats/$software.${ref//\//-}.mem.stat ]; then
                        output=`estimateMemTime.sh $software ${ref//\//-} $inputSize`
                        resAjust="$resAjust\n`cat $smartSlurmJobRecordDir/stats/$software.${ref//\//-}.mem.stat`\n"
                        resAjust="$resAjust\n#Output from estimateMemTime.sh: $output \n"
                        if [[ "$output" == "outOfRange" ]]; then
                            resAjust="$resAjust#Input size is too big for the curve to estimate! Use default mem and runtime to submit job.\n"
                            # not deleting mem.stat, so other jobs will not re-build it within 60 minutes
                        elif [ ! -z "$output" ]; then
                            output=${output% *}
                            [[ ${output% *} != 0 ]] && mem=$((${output% *}+extraMem)) && resAjust="$resAjust\n#Give ${extraMem} M extra memory. "
                            [[ ${output#* } != 0 ]] && min=$((${output#* }+defaultExtraTime)) && resAjust="$resAjust\n#Give $defaultExtraTime more minutes."
                            resAjust="$resAjust\n#So use this to submit the job: $mem M ${min} mins"

                        fi
                        #echoerr got estimation $output
                    fi

                fi
                #rm -r $OUT 2>/dev/null
            fi

        fi
    else
        echoerr Has input, but depends on other jobs
        resAjust="$resAjust#Use default mem and time. Has input, but this job depends on $deps."

    fi
    echo -e "$resAjust\n" > $outFlag
fi

#echoerr

# for OOM testing
#mem=1412

[ -z "$min" ] && { echoerr did not find time limit; exit 1; }

[ -z "$mem" ] && { echoerr did not find mem limit; exit 1; }


#time=$min

#[[ "$time" == *-* ]] && { day=${time%-*}; tem=${time#*-}; hour=${tem%%:*}; min=${tem#*:}; min=${min%%:*}; sec=${tem#$hour:$min}; sec=${sec#:}; } || { [[ "$time" =~ ^[0-9]+$ ]] && min=$time || { sec=${time##*:}; min=${time%:*}; min=${min##*:}; hour=${time%$min:$sec}; hour=${hour%:}; day=0;} }

#[ -z "$day" ] && day=0; [ -z "$hour" ] && hour=0; [ -z "$min" ] && min=0;[ -z "$sec" ] && sec=0

# resAjust="$resAjust#day $day,  hour $hour,  min $min,  sec $sec"

#echoerr looking partition for hour: $hours ##

# at least 100M and 10 minutes
#[ "$mem" -lt 100 ] && mem=100

#[ "$min" -lt 10 ] && min=10

adjustPartition $(( ( $min + 59 ) / 60 )) $partition

# 10 minutes less than the time in sbatch command
seconds=$(( $min * 60 ))

#set +x
#[ $seconds -le 60 ] && time=11:0 && seconds=60

#echoerr srun seconds: $seconds

time=`eval "echo $(date -ud "@$seconds" +'$((%s/3600/24))-%H:%M:%S')"`

#echoerr New time for srun: $timeN

#echoerr

# mem for srun is 10M less than sbatch command
#[[ "$mem" == *G ]] && memN=$(( 1024 * ${mem%G} -10 ))M || memN=$(( ${mem%M} -10 ))M

#[ ${memN%M} -le 1 ] && { echoerr Error: --mem for sbatch command should bigger than 11M; usage; }
#[ ${memN%M} -le 1 ] && mem=20M && memN=10M

#echoerr Mew mem for srun: $memN

#[ -z "$out" ] && out="slurm-\$SLURM_JOBID.out"
#[ -z "$err" ] && err="slurm-\$SLURM_JOBID.err"

echoerr
echoerr Building new sbatch command ...
#echo "#!/bin/bash" > $job

echo -e "#!/bin/bash\ndate\n\ntrap \"{ cleanUp.sh $flag $software ${ref//\//-} $inputSize $core $memO $minO $mem $min $partition  \\\"${slurmAcc#*-A }\\\" \\\"$inputs\\\" $extraMem $defaultExtraTime; }\" EXIT\nmemCpuMonitor.sh $flag $mem $min $memO $core &\n" > $job


# [[ "$mem" == *G ]] && totalM=$(( 1024 * ${mem%G})) || totalM=${mem%M}

# #echo "set -x" >> $job
# echo "if [ ! -f $smartSlurmLogDir/$flag.adjust ]; then" >> $job
# echo "   totalM=$totalM" >> $job
# echo "else " >> $job
# echo "   totalM=\`cat $smartSlurmLogDir/$flag.adjust\`" >> $job
# ## this might work if cluster is bussy, may need sleep more or get the data from a text file
# #echo "   sleep 10; sacct=\`sacct --format=JobID,Submit,Start,End,MaxRSS,State,NodeList%30,Partition,ReqTRES%30,TotalCPU,Elapsed%14,Timelimit%14 --units=M -j \$SLURM_JOBID\` " #>> $job
# #echo "   totalM=\${sacct#*,mem=}; totalM=\${totalM%%M,n*}" >> $job
# echo "fi" >> $job

# when submit jobs from interactive job, need this. Otherwise get error:
# echo -e "unset SLURM_MEM_PER_CPU SLURM_MEM_PER_GPU SLURM_MEM_PER_NODE SLURM_CPU_BIND" >> $job
echo -e "unset SLURM_CPU_BIND" >> $job

#echo -e "unset SLURM_MEM_PER_CPU SLURM_MEM_PER_GPU SLURM_MEM_PER_NODE SLURM_CPU_BIND" >> $job

if [ -z "$slurmScript" ]; then
    #echo "touch $startFlag" >> $job
    [[ "$wrapCMD" == *" " ]] && wrapCMD=${wrapCMD% *}; wrapCMD=${wrapCMD%;} # remove ending space and ; from command
    # `echo -e "$wrapCMD" | xargs echo -ne`; wrapCMD=${wrapCMD%;} # remove ending space and ; from command
    if [[ "$software" == *.Checkpoint ]]; then
        #echo -e "set -x\ntrap \"[ -f $succFlag ] || touch $failFlag\" EXIT SIGSTOP SIGHUP\nsh -e -c \"$wrapCMD\" && touch $succFlag" > ${job%.sh}.cmd

        # echo -e "set -x\nps -u $USER\nsh -eo -c \"$wrapCMD;\" &" > ${job%.sh}.cmd
        # echo -e "pid=\$$" >> ${job%.sh}.cmd
        # echo -e "echo \$pid > ${job%.sh}/taskProcessID.txt" >> ${job%.sh}.cmd
        # echo -e "ps -u $USER\nwait \$pid" >> ${job%.sh}.cmd
        # echo -e "echo \$? > ${job%.sh}/taskProcessStatus.txt" >> ${job%.sh}.cmd

        # note: if job OOT or OOM, .success or .failed will not be created
        echo -e "for i in \`seq 10000\`; do echo Program running time: \${i}0 s; sleep 10; done &\nsh -e -o pipefail  -c \"$wrapCMD; \" && touch $succFlag" > ${job%.sh}.cmd
        ##echo -e "x=\"\$wrapCMD\" >> ${job%.sh}.cmd
        ##echo -e "ps -fu $USER | grep -v awk | grep -v srun | grep -v grep | grep \"$flag\"" >> ${job%.sh}.cmd
        #echo -e "ps -fu $USER | grep \"$smartSlurmLogDir/$flag.cmd\"" >> ${job%.sh}.cmd

        #echo -e "pss=\`ps -fu $USER | grep \"$smartSlurmLogDir/$flag.cmd\"\`" >> ${job%.sh}.cmd
        ##echo -e "pid=\`ps -fu $USER | grep -v awk | grep -v srun | grep -v grep | grep \" $flag \" | tail -n 2 | head -n 1 | tr -s ' ' | cut -d' ' -f2\`" >> ${job%.sh}.cmd

        #echo -e "pid=\`echo -e \"\$pss\" | head -n 4 | tail -n 1 | tr -s ' ' | cut -d' ' -f2\`" >> ${job%.sh}.cmd
        #echo -e "echo \$pid > ${job%.sh}/taskProcessID.txt" >> ${job%.sh}.cmd
        #echo -e "ps -fu $USER\nwait" >> ${job%.sh}.cmd
        #echo -e "echo done > ${job%.sh}.success" >> ${job%.sh}.cmd

        # x="bash -e -c \"set -e; sh sleeping1.sh; \""
        # pid=`ps -f -u $USER | grep -v awk | grep -v srun | awk -v pat="$x"  '$0 ~ pat { print $2 }' | tail -n 1`
        # echo $pid > /n/scratch3/users/l/ld32/sethTest/log/2.0.useSomeMemTimeAccordingInputSize.sh.1/taskProcessID.txt

        #pid=$!
        # #echo $pid >
        # ps -f -u ld32
        # wait

        # echo done > /n/scratch3/users/l/ld32/sethTest/log/2.0.useSomeMemTimeAccordingInputSize.sh.1/taskProcessStatus.txt

        echo "srun -n 1 $slurmAcc sh -e -c \"checkpoint.sh \\\"sh ${job%.sh}.cmd $additionalPara\\\" $flag $mem $min $extraMem \"" >> $job
    else
        #echo "srun --mem \$srunM -n 1 $slurmAcc sh -e -o pipefail -c \"$wrapCMD $additionalPara ; \" && touch $succFlag" >> $job
        echo "srun -n 1 $slurmAcc sh -e -o pipefail -c '$wrapCMD $additionalPara;' && touch $succFlag" >> $job
        #echo "sh -e -o pipefail -c \"$wrapCMD; \" && touch $succFlag" >> $job
    fi
else
    grep "^#SBATCH" $slurmScript >> $job || true >> $job
    #echo "touch $startFlag" >> $job

    if [[ "$software" == *.Checkpoint ]]; then
        echo "srun -n 1 $slurmAcc sh -e -c \"checkpoint.sh \\\"sh $slurmScript $additionalPara && touch $succFlag\\\" $flag $mem $min $extraMem; \"" >> $job
    else
        echo "srun -n 1 $slurmAcc sh -e -o pipefail -c \"sh $slurmScript $additionalPara; \" && touch $succFlag" >> $job
    fi
fi
#echo "kill -9 \$mypid" >> $job
#echo "sleep 15 # wait slurm get the job status into its database" >> $job

#echo "echo Job done. Summary:" >> $job

# echo "sacct --format=JobID,Submit,Start,End,MaxRSS,State,NodeList%30,Partition,ReqTRES%30,TotalCPU,Elapsed%14,Timelimit%14 --units=M -j \$SLURM_JOBID" >> $job
# #echo SLURM_JOBID=\$SLURM_JOBID >> $job

# echo "emailAndRecord.sh \"$software\" \"${ref//\//-}\" \"$flag\" \"$inputSize\" \"$core\" \"$memO\" \"$timeO\" \"$mem\" \"$time\"" >> $job #  >/dev/null" >> $job

# echo "adjustDownStreamJobs.sh $smartSlurmLogDir/" >> $job

# echo "[ -f $succFlag ] ||  { touch $failFlag; exit 1; }" >> $job

#[ -z "$dir" ] && dir="./" || mkdir -p $dir

## todo: need fix this when path not starting with /
[ -z "$out" ] || ( [[ "$out" == /* ]] && mkdir -p $(dirname $out) || mkdir -p $dir/$(dirname $out) )
[ -z "$err" ] || ( [[ "$err" == /* ]] && mkdir -p $(dirname $err) || mkdir -p $dir/$(dirname $err) )

# [ -f $outFlag ] && [ ! -z "$out" ] && [[ ! $outFlag == "$out" ]] && echo ln -s $outFlag $out >> $job
# [ -f $errFlag ] && [ ! -z "$err" ] && [[ ! $errFlag == "$err" ]] && echo ln -s $errFlag $err >> $job

# testing
#mem=2000M

#if [ -z "$smartSlurmLogDir/" ]; then
#    cmd="/usr/bin/sbatch --mail-type=FAIL --requeue --parsable -p $partition --mem $mem -t $time --open-mode=append $slurmAcc"
#else
    if [ -z "$err" ]; then #errFlag=$smartSlurmLogDir/$flag.err
        cmd="/usr/bin/sbatch --mail-type=FAIL --requeue --parsable -p $partition -c $core --mem $mem -t $time --open-mode=append -o $outFlag -e $outFlag -J $flag $deps $slurmAcc"
        echo -ne "\n#Command used to submit the job: /usr/bin/sbatch --mail-type=FAIL --requeue --parsable -p \$myPartition -c $core --mem \$myMem -t \$myTime --open-mode=append -o $outFlag -e $outFlag -J $flag $deps $slurmAcc" >> $job
    else
        cmd="/usr/bin/sbatch --mail-type=FAIL --requeue --parsable -p $myPartition -c $core --mem $myMem -t $myTime --open-mode=append -o $outFlag -e $errFlag -J $flag $deps $slurmAcc"
        echo -ne "\n#Command used to submit the job: /usr/bin/sbatch --mail-type=FAIL --requeue --parsable -p \$myPartition -c $core --mem \$myMem -t \$myTime --open-mode=append -o $outFlag -e $errFlag -J $flag $deps $slurmAcc" >> $job
    fi

    #rm $startFile $failFile $flag.failed $flag.killed # 2>/dev/null  || :
#fi
#if [ -z "$slurmScript" ]; then
#    cmd="$cmd $additionalPara $job"
#    echo -e " $additionalPara $job" >> $job
#else
    cmd="$cmd $job $additionalPara"
    echo -e " $job $additionalPara" >> $job
#fi

exit 

#echo -e "\n#Command used to submit the job: $cmd" >> $job

#echoerr $resAjust

echoerr New sbatch command to submit job:
echoerr $cmd
if [[ "$testRun" == "run" ]]; then
    echoerr Start submtting job...
    #output=`$cmd`
    #echoerr $output
    #jobID=`$cmd`

    # try to submit the job three time in case it fails
    for i in {1..3}; do
        jobID=$($cmd 2>jobErr)
        jobErr=$(< jobErr); rm jobErr

        #catch jobID jobErr '$cmd'
        #echoerr id: .$jobID.
        #echoerr err: .$jobErr.
        # no error and a number job ID
        if [ ! -z "$jobID" ] && [ "$jobID" -eq "$jobID" ]; then
            touch $outFlag.$jobID
            break
        elif [ ! -z "$jobErr" ]; then
            echoerr "Got error $jobErr"

            # job submitted but the jobID is empty
            if [[ "jobErr" == *"Socket timed out"* ]]; then
                sleep 2
                jobID=`sacct --name $flag --format jobid | head -n 1`
                touch $outFlag.$jobID
                break
            else
                echoerr "not sure what error it is: $jobErr"
                exit
            fi
        fi
        sleep 2
    done

    echoerr final output is: $jobID

  #  set +x

    #touch $submitFlag
else
    jobID=$(date +"%4N")
    #echoerr This is a testing, not really running a job...
    echoerr "This is testing, so no job is submitted. In real run it should submit job such as: Submitted batch job $jobID"
    #jobID=
fi

echo -e "\n#mem=$mem time=$time" >> $job

# add this to the job script
echo -e "\n#Sbatch command output:\n#Submitted batch job $jobID" >> $job

if [ ! -z "$runningSingleJob" ]; then
    if [ -z "$out" ]; then
        touch $outFlag && ln $outFlag slurm-$jobID.out
    else
        out=${out/\%j/$jobID};
        touch $outFlag && ln $outFlag $out
    fi
    if [ ! -z "$err" ]; then
        err=${err/\%j/$jobID};
        touch $errFlag && ln $errFlag $err
    fi
fi

#[ ! -z "$err" ] && ln -s $outFlag $err
#if [ -z "$smartSlurmLogDir/" ]; then
#    out=${out/\%j/$jobID};
#    ln -s $job ${out/.out/}.sh
#else
printf "%-10s  %-20s  %-10s %-10s %-10s %-10s\n" $jobID $depsO $flag $software $ref $inputs >> $smartSlurmLogDir/allJobs.txt;
#fi

echoerr New slurmScirpt is ready. The content is:
cat $job >&2

echo Submitted batch job $jobID
